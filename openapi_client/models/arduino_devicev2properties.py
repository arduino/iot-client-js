/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import from openapi_client.models.arduino_property import ArduinoProperty from './from openapi_client.models.arduino_property import ArduinoProperty';


class ArduinoDevicev2properties {
    
    constructor() { 
        ArduinoDevicev2properties.initialize(this);
    }

    
    static initialize(obj) { 
        obj['data_retention_days'] = data_retention_days;
        obj['deviceId'] = device_id;
        obj['properties'] = properties;
        obj['user_id'] = user_id;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2properties();

            if (data.hasOwnProperty('data_retention_days')) {
                obj['data_retention_days'] = data.data_retention_days;
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = data.deviceId;
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = data.properties;
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = data.user_id;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDevicev2properties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                ArduinoProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

ArduinoDevicev2properties.RequiredProperties = ["data_retention_days", "deviceId", "properties", "user_id"];


ArduinoDevicev2properties.prototype['data_retention_days'] = undefined;


ArduinoDevicev2properties.prototype['deviceId'] = undefined;


ArduinoDevicev2properties.prototype['properties'] = undefined;


ArduinoDevicev2properties.prototype['user_id'] = undefined;






export default ArduinoDevicev2properties;

