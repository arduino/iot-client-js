/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ModelProperty {
    
    constructor() { 
        ModelProperty.initialize(this);
    }

    
    static initialize(obj) { 
        obj['name'] = name;
        obj['permission'] = permission;
        obj['persist'] = True;
        obj['type'] = type;
        obj['update_strategy'] = update_strategy;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelProperty();

            if (data.hasOwnProperty('max_value')) {
                obj['max_value'] = data.max_value;
            }
            if (data.hasOwnProperty('min_value')) {
                obj['min_value'] = data.min_value;
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = data.name;
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = data.permission;
            }
            if (data.hasOwnProperty('persist')) {
                obj['persist'] = data.persist;
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = data.tag;
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = data.type;
            }
            if (data.hasOwnProperty('update_parameter')) {
                obj['update_parameter'] = data.update_parameter;
            }
            if (data.hasOwnProperty('update_strategy')) {
                obj['update_strategy'] = data.update_strategy;
            }
            if (data.hasOwnProperty('variable_name')) {
                obj['variable_name'] = data.variable_name;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModelProperty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['update_strategy'] && !(typeof data['update_strategy'] === 'string' || data['update_strategy'] instanceof String)) {
            throw new Error("Expected the field `update_strategy` to be a primitive type in the JSON string but got " + data['update_strategy']);
        }
        // ensure the json data is a string
        if (data['variable_name'] && !(typeof data['variable_name'] === 'string' || data['variable_name'] instanceof String)) {
            throw new Error("Expected the field `variable_name` to be a primitive type in the JSON string but got " + data['variable_name']);
        }

        return true;
    }


}

ModelProperty.RequiredProperties = ["name", "permission", "type", "update_strategy"];


ModelProperty.prototype['max_value'] = undefined;


ModelProperty.prototype['min_value'] = undefined;


ModelProperty.prototype['name'] = undefined;


ModelProperty.prototype['permission'] = undefined;


ModelProperty.prototype['persist'] = True;


ModelProperty.prototype['tag'] = undefined;


ModelProperty.prototype['type'] = undefined;


ModelProperty.prototype['update_parameter'] = undefined;


ModelProperty.prototype['update_strategy'] = undefined;


ModelProperty.prototype['variable_name'] = undefined;






ModelProperty['PermissionEnum'] = {

    
    "&#39;ONLY&#39;": 'READ_ONLY',

    
    "&#39;WRITE&#39;": 'READ_WRITE'
};



ModelProperty['TypeEnum'] = {

    
    "&#39;ANALOG&#39;": 'ANALOG',

    
    "&#39;CHARSTRING&#39;": 'CHARSTRING',

    
    "&#39;FLOAT&#39;": 'FLOAT',

    
    "&#39;INT&#39;": 'INT',

    
    "&#39;LENGHT_C&#39;": 'LENGHT_C',

    
    "&#39;LENGHT_I&#39;": 'LENGHT_I',

    
    "&#39;LENGHT_M&#39;": 'LENGHT_M',

    
    "&#39;PERCENTAGE&#39;": 'PERCENTAGE',

    
    "&#39;STATUS&#39;": 'STATUS',

    
    "&#39;TEMPERATURE_C&#39;": 'TEMPERATURE_C',

    
    "&#39;TEMPERATURE_F&#39;": 'TEMPERATURE_F',

    
    "&#39;METER&#39;": 'METER',

    
    "&#39;KILOGRAM&#39;": 'KILOGRAM',

    
    "&#39;GRAM&#39;": 'GRAM',

    
    "&#39;SECOND&#39;": 'SECOND',

    
    "&#39;AMPERE&#39;": 'AMPERE',

    
    "&#39;KELVIN&#39;": 'KELVIN',

    
    "&#39;CANDELA&#39;": 'CANDELA',

    
    "&#39;MOLE&#39;": 'MOLE',

    
    "&#39;HERTZ&#39;": 'HERTZ',

    
    "&#39;RADIAN&#39;": 'RADIAN',

    
    "&#39;STERADIAN&#39;": 'STERADIAN',

    
    "&#39;NEWTON&#39;": 'NEWTON',

    
    "&#39;PASCAL&#39;": 'PASCAL',

    
    "&#39;JOULE&#39;": 'JOULE',

    
    "&#39;WATT&#39;": 'WATT',

    
    "&#39;COULOMB&#39;": 'COULOMB',

    
    "&#39;VOLT&#39;": 'VOLT',

    
    "&#39;FARAD&#39;": 'FARAD',

    
    "&#39;OHM&#39;": 'OHM',

    
    "&#39;SIEMENS&#39;": 'SIEMENS',

    
    "&#39;WEBER&#39;": 'WEBER',

    
    "&#39;TESLA&#39;": 'TESLA',

    
    "&#39;HENRY&#39;": 'HENRY',

    
    "&#39;DEGREES_CELSIUS&#39;": 'DEGREES_CELSIUS',

    
    "&#39;LUMEN&#39;": 'LUMEN',

    
    "&#39;LUX&#39;": 'LUX',

    
    "&#39;BECQUEREL&#39;": 'BECQUEREL',

    
    "&#39;GRAY&#39;": 'GRAY',

    
    "&#39;SIEVERT&#39;": 'SIEVERT',

    
    "&#39;KATAL&#39;": 'KATAL',

    
    "&#39;SQUARE_METER&#39;": 'SQUARE_METER',

    
    "&#39;CUBIC_METER&#39;": 'CUBIC_METER',

    
    "&#39;LITER&#39;": 'LITER',

    
    "&#39;METER_PER_SECOND&#39;": 'METER_PER_SECOND',

    
    "&#39;METER_PER_SQUARE_SECOND&#39;": 'METER_PER_SQUARE_SECOND',

    
    "&#39;CUBIC_METER_PER_SECOND&#39;": 'CUBIC_METER_PER_SECOND',

    
    "&#39;LITER_PER_SECOND&#39;": 'LITER_PER_SECOND',

    
    "&#39;WATT_PER_SQUARE_METER&#39;": 'WATT_PER_SQUARE_METER',

    
    "&#39;CANDELA_PER_SQUARE_METER&#39;": 'CANDELA_PER_SQUARE_METER',

    
    "&#39;BIT&#39;": 'BIT',

    
    "&#39;BIT_PER_SECOND&#39;": 'BIT_PER_SECOND',

    
    "&#39;DEGREES_LATITUDE&#39;": 'DEGREES_LATITUDE',

    
    "&#39;DEGREES_LONGITUDE&#39;": 'DEGREES_LONGITUDE',

    
    "&#39;PH_VALUE&#39;": 'PH_VALUE',

    
    "&#39;DECIBEL&#39;": 'DECIBEL',

    
    "&#39;DECIBEL_1W&#39;": 'DECIBEL_1W',

    
    "&#39;BEL&#39;": 'BEL',

    
    "&#39;COUNT&#39;": 'COUNT',

    
    "&#39;RATIO_DIV&#39;": 'RATIO_DIV',

    
    "&#39;RATIO_MOD&#39;": 'RATIO_MOD',

    
    "&#39;PERCENTAGE_RELATIVE_HUMIDITY&#39;": 'PERCENTAGE_RELATIVE_HUMIDITY',

    
    "&#39;PERCENTAGE_BATTERY_LEVEL&#39;": 'PERCENTAGE_BATTERY_LEVEL',

    
    "&#39;SECONDS_BATTERY_LEVEL&#39;": 'SECONDS_BATTERY_LEVEL',

    
    "&#39;EVENT_RATE_SECOND&#39;": 'EVENT_RATE_SECOND',

    
    "&#39;EVENT_RATE_MINUTE&#39;": 'EVENT_RATE_MINUTE',

    
    "&#39;HEART_RATE&#39;": 'HEART_RATE',

    
    "&#39;HEART_BEATS&#39;": 'HEART_BEATS',

    
    "&#39;SIEMENS_PER_METER&#39;": 'SIEMENS_PER_METER',

    
    "&#39;LOCATION&#39;": 'LOCATION',

    
    "&#39;COLOR_HSB&#39;": 'COLOR_HSB',

    
    "&#39;COLOR_RGB&#39;": 'COLOR_RGB',

    
    "&#39;GENERIC_COMPLEX_PROPERTY&#39;": 'GENERIC_COMPLEX_PROPERTY',

    
    "&#39;HOME_COLORED_LIGHT&#39;": 'HOME_COLORED_LIGHT',

    
    "&#39;HOME_DIMMED_LIGHT&#39;": 'HOME_DIMMED_LIGHT',

    
    "&#39;HOME_LIGHT&#39;": 'HOME_LIGHT',

    
    "&#39;HOME_CONTACT_SENSOR&#39;": 'HOME_CONTACT_SENSOR',

    
    "&#39;HOME_MOTION_SENSOR&#39;": 'HOME_MOTION_SENSOR',

    
    "&#39;HOME_SMART_PLUG&#39;": 'HOME_SMART_PLUG',

    
    "&#39;HOME_TEMPERATURE&#39;": 'HOME_TEMPERATURE',

    
    "&#39;HOME_TEMPERATURE_C&#39;": 'HOME_TEMPERATURE_C',

    
    "&#39;HOME_TEMPERATURE_F&#39;": 'HOME_TEMPERATURE_F',

    
    "&#39;HOME_SWITCH&#39;": 'HOME_SWITCH',

    
    "&#39;HOME_TELEVISION&#39;": 'HOME_TELEVISION',

    
    "&#39;GOOGLE_HOME_COLORED_LIGHT&#39;": 'GOOGLE_HOME_COLORED_LIGHT',

    
    "&#39;GOOGLE_HOME_DIMMED_LIGHT&#39;": 'GOOGLE_HOME_DIMMED_LIGHT',

    
    "&#39;GOOGLE_HOME_LIGHT&#39;": 'GOOGLE_HOME_LIGHT',

    
    "&#39;GOOGLE_HOME_CONTACT_SENSOR&#39;": 'GOOGLE_HOME_CONTACT_SENSOR',

    
    "&#39;GOOGLE_HOME_MOTION_SENSOR&#39;": 'GOOGLE_HOME_MOTION_SENSOR',

    
    "&#39;GOOGLE_HOME_SMART_PLUG&#39;": 'GOOGLE_HOME_SMART_PLUG',

    
    "&#39;GOOGLE_HOME_TEMPERATURE&#39;": 'GOOGLE_HOME_TEMPERATURE',

    
    "&#39;GOOGLE_HOME_TEMPERATURE_C&#39;": 'GOOGLE_HOME_TEMPERATURE_C',

    
    "&#39;GOOGLE_HOME_TEMPERATURE_F&#39;": 'GOOGLE_HOME_TEMPERATURE_F',

    
    "&#39;GOOGLE_HOME_SWITCH&#39;": 'GOOGLE_HOME_SWITCH',

    
    "&#39;SMART_HOME_COLORED_LIGHT&#39;": 'SMART_HOME_COLORED_LIGHT',

    
    "&#39;SMART_HOME_DIMMED_LIGHT&#39;": 'SMART_HOME_DIMMED_LIGHT',

    
    "&#39;SMART_HOME_LIGHT&#39;": 'SMART_HOME_LIGHT',

    
    "&#39;SMART_HOME_CONTACT_SENSOR&#39;": 'SMART_HOME_CONTACT_SENSOR',

    
    "&#39;SMART_HOME_MOTION_SENSOR&#39;": 'SMART_HOME_MOTION_SENSOR',

    
    "&#39;SMART_HOME_SMART_PLUG&#39;": 'SMART_HOME_SMART_PLUG',

    
    "&#39;SMART_HOME_TEMPERATURE&#39;": 'SMART_HOME_TEMPERATURE',

    
    "&#39;SMART_HOME_TEMPERATURE_C&#39;": 'SMART_HOME_TEMPERATURE_C',

    
    "&#39;SMART_HOME_TEMPERATURE_F&#39;": 'SMART_HOME_TEMPERATURE_F',

    
    "&#39;SMART_HOME_SWITCH&#39;": 'SMART_HOME_SWITCH',

    
    "&#39;SMART_HOME_TELEVISION&#39;": 'SMART_HOME_TELEVISION',

    
    "&#39;ENERGY&#39;": 'ENERGY',

    
    "&#39;FORCE&#39;": 'FORCE',

    
    "&#39;TEMPERATURE&#39;": 'TEMPERATURE',

    
    "&#39;POWER&#39;": 'POWER',

    
    "&#39;ELECTRIC_CURRENT&#39;": 'ELECTRIC_CURRENT',

    
    "&#39;ELECTRIC_POTENTIAL&#39;": 'ELECTRIC_POTENTIAL',

    
    "&#39;ELECTRICAL_RESISTANCE&#39;": 'ELECTRICAL_RESISTANCE',

    
    "&#39;CAPACITANCE&#39;": 'CAPACITANCE',

    
    "&#39;TIME&#39;": 'TIME',

    
    "&#39;FREQUENCY&#39;": 'FREQUENCY',

    
    "&#39;DATA_RATE&#39;": 'DATA_RATE',

    
    "&#39;ACCELERATION&#39;": 'ACCELERATION',

    
    "&#39;AREA&#39;": 'AREA',

    
    "&#39;LENGTH&#39;": 'LENGTH',

    
    "&#39;VELOCITY&#39;": 'VELOCITY',

    
    "&#39;MASS&#39;": 'MASS',

    
    "&#39;VOLUME&#39;": 'VOLUME',

    
    "&#39;FLOW_RATE&#39;": 'FLOW_RATE',

    
    "&#39;ANGLE&#39;": 'ANGLE',

    
    "&#39;ILLUMINANCE&#39;": 'ILLUMINANCE',

    
    "&#39;LUMINOUS_FLUX&#39;": 'LUMINOUS_FLUX',

    
    "&#39;LUMINANCE&#39;": 'LUMINANCE',

    
    "&#39;LUMINOUS_INTENSITY&#39;": 'LUMINOUS_INTENSITY',

    
    "&#39;LOGARITHMIC_QUANTITY&#39;": 'LOGARITHMIC_QUANTITY',

    
    "&#39;PRESSURE&#39;": 'PRESSURE',

    
    "&#39;INFORMATION_CONTENT&#39;": 'INFORMATION_CONTENT',

    
    "&#39;SCHEDULE&#39;": 'SCHEDULE'
};



ModelProperty['Update_strategyEnum'] = {

    
    "&#39;ON_CHANGE&#39;": 'ON_CHANGE',

    
    "&#39;TIMED&#39;": 'TIMED'
};



export default ModelProperty;

