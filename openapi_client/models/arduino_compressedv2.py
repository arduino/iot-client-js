/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ArduinoCompressedv2 {
    
    constructor() { 
        ArduinoCompressedv2.initialize(this);
    }

    
    static initialize(obj) { 
        obj['not_after'] = not_after;
        obj['not_before'] = not_before;
        obj['serial'] = serial;
        obj['signature'] = signature;
        obj['signature_asn1_x'] = signature_asn1_x;
        obj['signature_asn1_y'] = signature_asn1_y;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoCompressedv2();

            if (data.hasOwnProperty('authority_key_identifier')) {
                obj['authority_key_identifier'] = data.authority_key_identifier;
            }
            if (data.hasOwnProperty('not_after')) {
                obj['not_after'] = data.not_after;
            }
            if (data.hasOwnProperty('not_before')) {
                obj['not_before'] = data.not_before;
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = data.serial;
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = data.signature;
            }
            if (data.hasOwnProperty('signature_asn1_x')) {
                obj['signature_asn1_x'] = data.signature_asn1_x;
            }
            if (data.hasOwnProperty('signature_asn1_y')) {
                obj['signature_asn1_y'] = data.signature_asn1_y;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoCompressedv2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authority_key_identifier'] && !(typeof data['authority_key_identifier'] === 'string' || data['authority_key_identifier'] instanceof String)) {
            throw new Error("Expected the field `authority_key_identifier` to be a primitive type in the JSON string but got " + data['authority_key_identifier']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['signature_asn1_x'] && !(typeof data['signature_asn1_x'] === 'string' || data['signature_asn1_x'] instanceof String)) {
            throw new Error("Expected the field `signature_asn1_x` to be a primitive type in the JSON string but got " + data['signature_asn1_x']);
        }
        // ensure the json data is a string
        if (data['signature_asn1_y'] && !(typeof data['signature_asn1_y'] === 'string' || data['signature_asn1_y'] instanceof String)) {
            throw new Error("Expected the field `signature_asn1_y` to be a primitive type in the JSON string but got " + data['signature_asn1_y']);
        }

        return true;
    }


}

ArduinoCompressedv2.RequiredProperties = ["not_after", "not_before", "serial", "signature", "signature_asn1_x", "signature_asn1_y"];


ArduinoCompressedv2.prototype['authority_key_identifier'] = undefined;


ArduinoCompressedv2.prototype['not_after'] = undefined;


ArduinoCompressedv2.prototype['not_before'] = undefined;


ArduinoCompressedv2.prototype['serial'] = undefined;


ArduinoCompressedv2.prototype['signature'] = undefined;


ArduinoCompressedv2.prototype['signature_asn1_x'] = undefined;


ArduinoCompressedv2.prototype['signature_asn1_y'] = undefined;






export default ArduinoCompressedv2;

