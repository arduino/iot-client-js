/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import from openapi_client.models.arduino_devicev2_simple_properties import ArduinoDevicev2SimpleProperties from './from openapi_client.models.arduino_devicev2_simple_properties import ArduinoDevicev2SimpleProperties';
import from openapi_client.models.arduino_devicev2_webhook import ArduinoDevicev2Webhook from './from openapi_client.models.arduino_devicev2_webhook import ArduinoDevicev2Webhook';
import from openapi_client.models.arduino_thing import ArduinoThing from './from openapi_client.models.arduino_thing import ArduinoThing';


class ArduinoDevicev2 {
    
    constructor() { 
        ArduinoDevicev2.initialize(this);
    }

    
    static initialize(obj) { 
        obj['href'] = href;
        obj['id'] = id;
        obj['label'] = label;
        obj['name'] = name;
        obj['serial'] = serial;
        obj['type'] = type;
        obj['user_id'] = user_id;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2();

            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = data.connection_type;
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = data.created_at;
            }
            if (data.hasOwnProperty('device_status')) {
                obj['device_status'] = data.device_status;
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = data.events;
            }
            if (data.hasOwnProperty('fqbn')) {
                obj['fqbn'] = data.fqbn;
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = data.href;
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = data.id;
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = data.label;
            }
            if (data.hasOwnProperty('last_activity_at')) {
                obj['last_activity_at'] = data.last_activity_at;
            }
            if (data.hasOwnProperty('latest_wifi_fw_version')) {
                obj['latest_wifi_fw_version'] = data.latest_wifi_fw_version;
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = data.metadata;
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = data.name;
            }
            if (data.hasOwnProperty('no_sketch')) {
                obj['no_sketch'] = data.no_sketch;
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = data.organization_id;
            }
            if (data.hasOwnProperty('ota_available')) {
                obj['ota_available'] = data.ota_available;
            }
            if (data.hasOwnProperty('ota_compatible')) {
                obj['ota_compatible'] = data.ota_compatible;
            }
            if (data.hasOwnProperty('required_wifi_fw_version')) {
                obj['required_wifi_fw_version'] = data.required_wifi_fw_version;
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = data.serial;
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = data.tags;
            }
            if (data.hasOwnProperty('thing')) {
                obj['thing'] = data.thing;
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = data.type;
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = data.user_id;
            }
            if (data.hasOwnProperty('webhooks')) {
                obj['webhooks'] = data.webhooks;
            }
            if (data.hasOwnProperty('wifi_fw_version')) {
                obj['wifi_fw_version'] = data.wifi_fw_version;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDevicev2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connection_type'] && !(typeof data['connection_type'] === 'string' || data['connection_type'] instanceof String)) {
            throw new Error("Expected the field `connection_type` to be a primitive type in the JSON string but got " + data['connection_type']);
        }
        // ensure the json data is a string
        if (data['device_status'] && !(typeof data['device_status'] === 'string' || data['device_status'] instanceof String)) {
            throw new Error("Expected the field `device_status` to be a primitive type in the JSON string but got " + data['device_status']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                ArduinoDevicev2SimpleProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fqbn'] && !(typeof data['fqbn'] === 'string' || data['fqbn'] instanceof String)) {
            throw new Error("Expected the field `fqbn` to be a primitive type in the JSON string but got " + data['fqbn']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['latest_wifi_fw_version'] && !(typeof data['latest_wifi_fw_version'] === 'string' || data['latest_wifi_fw_version'] instanceof String)) {
            throw new Error("Expected the field `latest_wifi_fw_version` to be a primitive type in the JSON string but got " + data['latest_wifi_fw_version']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['required_wifi_fw_version'] && !(typeof data['required_wifi_fw_version'] === 'string' || data['required_wifi_fw_version'] instanceof String)) {
            throw new Error("Expected the field `required_wifi_fw_version` to be a primitive type in the JSON string but got " + data['required_wifi_fw_version']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // validate the optional field `thing`
        if (data['thing']) { // data not null
          ArduinoThing.validateJSON(data['thing']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        if (data['webhooks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webhooks'])) {
                throw new Error("Expected the field `webhooks` to be an array in the JSON data but got " + data['webhooks']);
            }
            // validate the optional field `webhooks` (array)
            for (const item of data['webhooks']) {
                ArduinoDevicev2Webhook.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['wifi_fw_version'] && !(typeof data['wifi_fw_version'] === 'string' || data['wifi_fw_version'] instanceof String)) {
            throw new Error("Expected the field `wifi_fw_version` to be a primitive type in the JSON string but got " + data['wifi_fw_version']);
        }

        return true;
    }


}

ArduinoDevicev2.RequiredProperties = ["href", "id", "label", "name", "serial", "type", "user_id"];


ArduinoDevicev2.prototype['connection_type'] = undefined;


ArduinoDevicev2.prototype['created_at'] = undefined;


ArduinoDevicev2.prototype['device_status'] = undefined;


ArduinoDevicev2.prototype['events'] = undefined;


ArduinoDevicev2.prototype['fqbn'] = undefined;


ArduinoDevicev2.prototype['href'] = undefined;


ArduinoDevicev2.prototype['id'] = undefined;


ArduinoDevicev2.prototype['label'] = undefined;


ArduinoDevicev2.prototype['last_activity_at'] = undefined;


ArduinoDevicev2.prototype['latest_wifi_fw_version'] = undefined;


ArduinoDevicev2.prototype['metadata'] = undefined;


ArduinoDevicev2.prototype['name'] = undefined;


ArduinoDevicev2.prototype['no_sketch'] = undefined;


ArduinoDevicev2.prototype['organization_id'] = undefined;


ArduinoDevicev2.prototype['ota_available'] = undefined;


ArduinoDevicev2.prototype['ota_compatible'] = undefined;


ArduinoDevicev2.prototype['required_wifi_fw_version'] = undefined;


ArduinoDevicev2.prototype['serial'] = undefined;


ArduinoDevicev2.prototype['tags'] = undefined;


ArduinoDevicev2.prototype['thing'] = undefined;


ArduinoDevicev2.prototype['type'] = undefined;


ArduinoDevicev2.prototype['user_id'] = undefined;


ArduinoDevicev2.prototype['webhooks'] = undefined;


ArduinoDevicev2.prototype['wifi_fw_version'] = undefined;






ArduinoDevicev2['Connection_typeEnum'] = {

    
    "&#39;wifi&#39;": 'wifi',

    
    "&#39;eth&#39;": 'eth',

    
    "&#39;wifiandsecret&#39;": 'wifiandsecret',

    
    "&#39;gsm&#39;": 'gsm',

    
    "&#39;nb&#39;": 'nb',

    
    "&#39;lora&#39;": 'lora',

    
    "&#39;catm1&#39;": 'catm1',

    
    "&#39;cellular&#39;": 'cellular'
};



ArduinoDevicev2['Device_statusEnum'] = {

    
    "&#39;ONLINE&#39;": 'ONLINE',

    
    "&#39;OFFLINE&#39;": 'OFFLINE',

    
    "&#39;UNKNOWN&#39;": 'UNKNOWN'
};



export default ArduinoDevicev2;

