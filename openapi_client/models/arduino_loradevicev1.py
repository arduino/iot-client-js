/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ArduinoLoradevicev1 {
    
    constructor() { 
        ArduinoLoradevicev1.initialize(this);
    }

    
    static initialize(obj) { 
        obj['app_eui'] = app_eui;
        obj['app_key'] = app_key;
        obj['device_id'] = device_id;
        obj['eui'] = eui;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoLoradevicev1();

            if (data.hasOwnProperty('app_eui')) {
                obj['app_eui'] = data.app_eui;
            }
            if (data.hasOwnProperty('app_key')) {
                obj['app_key'] = data.app_key;
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = data.device_id;
            }
            if (data.hasOwnProperty('eui')) {
                obj['eui'] = data.eui;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoLoradevicev1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_eui'] && !(typeof data['app_eui'] === 'string' || data['app_eui'] instanceof String)) {
            throw new Error("Expected the field `app_eui` to be a primitive type in the JSON string but got " + data['app_eui']);
        }
        // ensure the json data is a string
        if (data['app_key'] && !(typeof data['app_key'] === 'string' || data['app_key'] instanceof String)) {
            throw new Error("Expected the field `app_key` to be a primitive type in the JSON string but got " + data['app_key']);
        }
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // ensure the json data is a string
        if (data['eui'] && !(typeof data['eui'] === 'string' || data['eui'] instanceof String)) {
            throw new Error("Expected the field `eui` to be a primitive type in the JSON string but got " + data['eui']);
        }

        return true;
    }


}

ArduinoLoradevicev1.RequiredProperties = ["app_eui", "app_key", "device_id", "eui"];


ArduinoLoradevicev1.prototype['app_eui'] = undefined;


ArduinoLoradevicev1.prototype['app_key'] = undefined;


ArduinoLoradevicev1.prototype['device_id'] = undefined;


ArduinoLoradevicev1.prototype['eui'] = undefined;






export default ArduinoLoradevicev1;

