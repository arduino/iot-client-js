/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class Devicev2 {
    
    constructor() { 
        Devicev2.initialize(this);
    }

    
    static initialize(obj) { 
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Devicev2();

            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = data.connection_type;
            }
            if (data.hasOwnProperty('fqbn')) {
                obj['fqbn'] = data.fqbn;
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = data.name;
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = data.serial;
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = data.type;
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = data.user_id;
            }
            if (data.hasOwnProperty('wifi_fw_version')) {
                obj['wifi_fw_version'] = data.wifi_fw_version;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connection_type'] && !(typeof data['connection_type'] === 'string' || data['connection_type'] instanceof String)) {
            throw new Error("Expected the field `connection_type` to be a primitive type in the JSON string but got " + data['connection_type']);
        }
        // ensure the json data is a string
        if (data['fqbn'] && !(typeof data['fqbn'] === 'string' || data['fqbn'] instanceof String)) {
            throw new Error("Expected the field `fqbn` to be a primitive type in the JSON string but got " + data['fqbn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['wifi_fw_version'] && !(typeof data['wifi_fw_version'] === 'string' || data['wifi_fw_version'] instanceof String)) {
            throw new Error("Expected the field `wifi_fw_version` to be a primitive type in the JSON string but got " + data['wifi_fw_version']);
        }

        return true;
    }


}




Devicev2.prototype['connection_type'] = undefined;


Devicev2.prototype['fqbn'] = undefined;


Devicev2.prototype['name'] = undefined;


Devicev2.prototype['serial'] = undefined;


Devicev2.prototype['type'] = undefined;


Devicev2.prototype['user_id'] = undefined;


Devicev2.prototype['wifi_fw_version'] = undefined;






Devicev2['Connection_typeEnum'] = {

    
    "&#39;wifi&#39;": 'wifi',

    
    "&#39;eth&#39;": 'eth',

    
    "&#39;wifiandsecret&#39;": 'wifiandsecret',

    
    "&#39;gsm&#39;": 'gsm',

    
    "&#39;nb&#39;": 'nb',

    
    "&#39;lora&#39;": 'lora',

    
    "&#39;catm1&#39;": 'catm1',

    
    "&#39;cellular&#39;": 'cellular'
};



Devicev2['TypeEnum'] = {

    
    "&#39;mkrwifi1010&#39;": 'mkrwifi1010',

    
    "&#39;mkr1000&#39;": 'mkr1000',

    
    "&#39;nano_33_iot&#39;": 'nano_33_iot',

    
    "&#39;mkrgsm1400&#39;": 'mkrgsm1400',

    
    "&#39;mkrnb1500&#39;": 'mkrnb1500',

    
    "&#39;login_and_secretkey_wifi&#39;": 'login_and_secretkey_wifi',

    
    "&#39;envie_m7&#39;": 'envie_m7',

    
    "&#39;nanorp2040connect&#39;": 'nanorp2040connect',

    
    "&#39;nicla_vision&#39;": 'nicla_vision',

    
    "&#39;phone&#39;": 'phone',

    
    "&#39;portenta_x8&#39;": 'portenta_x8',

    
    "&#39;opta&#39;": 'opta',

    
    "&#39;giga&#39;": 'giga',

    
    "&#39;generic_device_secretkey&#39;": 'generic_device_secretkey',

    
    "&#39;portenta_c33&#39;": 'portenta_c33',

    
    "&#39;unor4wifi&#39;": 'unor4wifi',

    
    "&#39;nano_nora&#39;": 'nano_nora'
};



export default Devicev2;

