/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ArduinoSeriesRawLastValueResponse {
    
    constructor() { 
        ArduinoSeriesRawLastValueResponse.initialize(this);
    }

    
    static initialize(obj) { 
        obj['count_values'] = count_values;
        obj['property_id'] = property_id;
        obj['thing_id'] = thing_id;
        obj['times'] = times;
        obj['values'] = values;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoSeriesRawLastValueResponse();

            if (data.hasOwnProperty('count_values')) {
                obj['count_values'] = data.count_values;
            }
            if (data.hasOwnProperty('property_id')) {
                obj['property_id'] = data.property_id;
            }
            if (data.hasOwnProperty('thing_id')) {
                obj['thing_id'] = data.thing_id;
            }
            if (data.hasOwnProperty('times')) {
                obj['times'] = data.times;
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = data.values;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoSeriesRawLastValueResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['property_id'] && !(typeof data['property_id'] === 'string' || data['property_id'] instanceof String)) {
            throw new Error("Expected the field `property_id` to be a primitive type in the JSON string but got " + data['property_id']);
        }
        // ensure the json data is a string
        if (data['thing_id'] && !(typeof data['thing_id'] === 'string' || data['thing_id'] instanceof String)) {
            throw new Error("Expected the field `thing_id` to be a primitive type in the JSON string but got " + data['thing_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['times'])) {
            throw new Error("Expected the field `times` to be an array in the JSON data but got " + data['times']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

ArduinoSeriesRawLastValueResponse.RequiredProperties = ["count_values", "property_id", "thing_id", "times", "values"];


ArduinoSeriesRawLastValueResponse.prototype['count_values'] = undefined;


ArduinoSeriesRawLastValueResponse.prototype['property_id'] = undefined;


ArduinoSeriesRawLastValueResponse.prototype['thing_id'] = undefined;


ArduinoSeriesRawLastValueResponse.prototype['times'] = undefined;


ArduinoSeriesRawLastValueResponse.prototype['values'] = undefined;






export default ArduinoSeriesRawLastValueResponse;

