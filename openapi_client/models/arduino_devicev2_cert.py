/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import from openapi_client.models.arduino_compressedv2 import ArduinoCompressedv2 from './from openapi_client.models.arduino_compressedv2 import ArduinoCompressedv2';


class ArduinoDevicev2Cert {
    
    constructor() { 
        ArduinoDevicev2Cert.initialize(this);
    }

    
    static initialize(obj) { 
        obj['compressed'] = compressed;
        obj['der'] = der;
        obj['device_id'] = device_id;
        obj['enabled'] = enabled || True;
        obj['href'] = href;
        obj['id'] = id;
        obj['pem'] = pem;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2Cert();

            if (data.hasOwnProperty('ca')) {
                obj['ca'] = data.ca;
            }
            if (data.hasOwnProperty('compressed')) {
                obj['compressed'] = data.compressed;
            }
            if (data.hasOwnProperty('der')) {
                obj['der'] = data.der;
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = data.device_id;
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = data.enabled;
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = data.href;
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = data.id;
            }
            if (data.hasOwnProperty('pem')) {
                obj['pem'] = data.pem;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDevicev2Cert.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ca'] && !(typeof data['ca'] === 'string' || data['ca'] instanceof String)) {
            throw new Error("Expected the field `ca` to be a primitive type in the JSON string but got " + data['ca']);
        }
        // validate the optional field `compressed`
        if (data['compressed']) { // data not null
          ArduinoCompressedv2.validateJSON(data['compressed']);
        }
        // ensure the json data is a string
        if (data['der'] && !(typeof data['der'] === 'string' || data['der'] instanceof String)) {
            throw new Error("Expected the field `der` to be a primitive type in the JSON string but got " + data['der']);
        }
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['pem'] && !(typeof data['pem'] === 'string' || data['pem'] instanceof String)) {
            throw new Error("Expected the field `pem` to be a primitive type in the JSON string but got " + data['pem']);
        }

        return true;
    }


}

ArduinoDevicev2Cert.RequiredProperties = ["compressed", "der", "device_id", "enabled", "href", "id", "pem"];


ArduinoDevicev2Cert.prototype['ca'] = undefined;


ArduinoDevicev2Cert.prototype['compressed'] = undefined;


ArduinoDevicev2Cert.prototype['der'] = undefined;


ArduinoDevicev2Cert.prototype['device_id'] = undefined;


ArduinoDevicev2Cert.prototype['enabled'] = True;


ArduinoDevicev2Cert.prototype['href'] = undefined;


ArduinoDevicev2Cert.prototype['id'] = undefined;


ArduinoDevicev2Cert.prototype['pem'] = undefined;






export default ArduinoDevicev2Cert;

