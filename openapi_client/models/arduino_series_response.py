/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ArduinoSeriesResponse {
    
    constructor() { 
        ArduinoSeriesResponse.initialize(this);
    }

    
    static initialize(obj) { 
        obj['count_values'] = count_values;
        obj['from_date'] = from_date;
        obj['interval'] = interval;
        obj['message'] = '';
        obj['query'] = query;
        obj['resp_version'] = resp_version;
        obj['status'] = status;
        obj['times'] = times;
        obj['to_date'] = to_date;
        obj['values'] = values;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoSeriesResponse();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = data.aggregation;
            }
            if (data.hasOwnProperty('count_values')) {
                obj['count_values'] = data.count_values;
            }
            if (data.hasOwnProperty('from_date')) {
                obj['from_date'] = data.from_date;
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = data.interval;
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = data.message;
            }
            if (data.hasOwnProperty('property_id')) {
                obj['property_id'] = data.property_id;
            }
            if (data.hasOwnProperty('property_name')) {
                obj['property_name'] = data.property_name;
            }
            if (data.hasOwnProperty('property_type')) {
                obj['property_type'] = data.property_type;
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = data.query;
            }
            if (data.hasOwnProperty('resp_version')) {
                obj['resp_version'] = data.resp_version;
            }
            if (data.hasOwnProperty('series_limit')) {
                obj['series_limit'] = data.series_limit;
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = data.status;
            }
            if (data.hasOwnProperty('thing_id')) {
                obj['thing_id'] = data.thing_id;
            }
            if (data.hasOwnProperty('times')) {
                obj['times'] = data.times;
            }
            if (data.hasOwnProperty('to_date')) {
                obj['to_date'] = data.to_date;
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = data.values;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoSeriesResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aggregation'] && !(typeof data['aggregation'] === 'string' || data['aggregation'] instanceof String)) {
            throw new Error("Expected the field `aggregation` to be a primitive type in the JSON string but got " + data['aggregation']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['property_id'] && !(typeof data['property_id'] === 'string' || data['property_id'] instanceof String)) {
            throw new Error("Expected the field `property_id` to be a primitive type in the JSON string but got " + data['property_id']);
        }
        // ensure the json data is a string
        if (data['property_name'] && !(typeof data['property_name'] === 'string' || data['property_name'] instanceof String)) {
            throw new Error("Expected the field `property_name` to be a primitive type in the JSON string but got " + data['property_name']);
        }
        // ensure the json data is a string
        if (data['property_type'] && !(typeof data['property_type'] === 'string' || data['property_type'] instanceof String)) {
            throw new Error("Expected the field `property_type` to be a primitive type in the JSON string but got " + data['property_type']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['thing_id'] && !(typeof data['thing_id'] === 'string' || data['thing_id'] instanceof String)) {
            throw new Error("Expected the field `thing_id` to be a primitive type in the JSON string but got " + data['thing_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['times'])) {
            throw new Error("Expected the field `times` to be an array in the JSON data but got " + data['times']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

ArduinoSeriesResponse.RequiredProperties = ["count_values", "from_date", "interval", "query", "resp_version", "status", "times", "to_date", "values"];


ArduinoSeriesResponse.prototype['aggregation'] = undefined;


ArduinoSeriesResponse.prototype['count_values'] = undefined;


ArduinoSeriesResponse.prototype['from_date'] = undefined;


ArduinoSeriesResponse.prototype['interval'] = undefined;


ArduinoSeriesResponse.prototype['message'] = '';


ArduinoSeriesResponse.prototype['property_id'] = undefined;


ArduinoSeriesResponse.prototype['property_name'] = undefined;


ArduinoSeriesResponse.prototype['property_type'] = undefined;


ArduinoSeriesResponse.prototype['query'] = undefined;


ArduinoSeriesResponse.prototype['resp_version'] = undefined;


ArduinoSeriesResponse.prototype['series_limit'] = undefined;


ArduinoSeriesResponse.prototype['status'] = undefined;


ArduinoSeriesResponse.prototype['thing_id'] = undefined;


ArduinoSeriesResponse.prototype['times'] = undefined;


ArduinoSeriesResponse.prototype['to_date'] = undefined;


ArduinoSeriesResponse.prototype['values'] = undefined;






ArduinoSeriesResponse['AggregationEnum'] = {

    
    "&#39;AVG&#39;": 'AVG',

    
    "&#39;MIN&#39;": 'MIN',

    
    "&#39;MAX&#39;": 'MAX',

    
    "&#39;SUM&#39;": 'SUM',

    
    "&#39;COUNT&#39;": 'COUNT',

    
    "&#39;PCT_99&#39;": 'PCT_99',

    
    "&#39;PCT_95&#39;": 'PCT_95',

    
    "&#39;PCT_90&#39;": 'PCT_90',

    
    "&#39;PCT_75&#39;": 'PCT_75',

    
    "&#39;PCT_50&#39;": 'PCT_50',

    
    "&#39;PCT_15&#39;": 'PCT_15',

    
    "&#39;PCT_5&#39;": 'PCT_5',

    
    "&#39;BOOL_OR&#39;": 'BOOL_OR',

    
    "&#39;BOOL_AND&#39;": 'BOOL_AND'
};



export default ArduinoSeriesResponse;

