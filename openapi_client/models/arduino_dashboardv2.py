/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import from openapi_client.models.arduino_dashboardowner import ArduinoDashboardowner from './from openapi_client.models.arduino_dashboardowner import ArduinoDashboardowner';
import from openapi_client.models.arduino_dashboardshare import ArduinoDashboardshare from './from openapi_client.models.arduino_dashboardshare import ArduinoDashboardshare';
import from openapi_client.models.arduino_widgetv2 import ArduinoWidgetv2 from './from openapi_client.models.arduino_widgetv2 import ArduinoWidgetv2';


class ArduinoDashboardv2 {
    
    constructor() { 
        ArduinoDashboardv2.initialize(this);
    }

    
    static initialize(obj) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['updated_at'] = updated_at;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDashboardv2();

            if (data.hasOwnProperty('cover_image')) {
                obj['cover_image'] = data.cover_image;
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = data.created_by;
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = data.id;
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = data.name;
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = data.organization_id;
            }
            if (data.hasOwnProperty('shared_by')) {
                obj['shared_by'] = data.shared_by;
            }
            if (data.hasOwnProperty('shared_with')) {
                obj['shared_with'] = data.shared_with;
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = data.updated_at;
            }
            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = data.widgets;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDashboardv2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cover_image'] && !(typeof data['cover_image'] === 'string' || data['cover_image'] instanceof String)) {
            throw new Error("Expected the field `cover_image` to be a primitive type in the JSON string but got " + data['cover_image']);
        }
        // validate the optional field `created_by`
        if (data['created_by']) { // data not null
          ArduinoDashboardowner.validateJSON(data['created_by']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // validate the optional field `shared_by`
        if (data['shared_by']) { // data not null
          ArduinoDashboardshare.validateJSON(data['shared_by']);
        }
        if (data['shared_with']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shared_with'])) {
                throw new Error("Expected the field `shared_with` to be an array in the JSON data but got " + data['shared_with']);
            }
            // validate the optional field `shared_with` (array)
            for (const item of data['shared_with']) {
                ArduinoDashboardshare.validateJSON(item);
            };
        }
        if (data['widgets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['widgets'])) {
                throw new Error("Expected the field `widgets` to be an array in the JSON data but got " + data['widgets']);
            }
            // validate the optional field `widgets` (array)
            for (const item of data['widgets']) {
                ArduinoWidgetv2.validateJSON(item);
            };
        }

        return true;
    }


}

ArduinoDashboardv2.RequiredProperties = ["id", "name", "updated_at"];


ArduinoDashboardv2.prototype['cover_image'] = undefined;


ArduinoDashboardv2.prototype['created_by'] = undefined;


ArduinoDashboardv2.prototype['id'] = undefined;


ArduinoDashboardv2.prototype['name'] = undefined;


ArduinoDashboardv2.prototype['organization_id'] = undefined;


ArduinoDashboardv2.prototype['shared_by'] = undefined;


ArduinoDashboardv2.prototype['shared_with'] = undefined;


ArduinoDashboardv2.prototype['updated_at'] = undefined;


ArduinoDashboardv2.prototype['widgets'] = undefined;






export default ArduinoDashboardv2;

