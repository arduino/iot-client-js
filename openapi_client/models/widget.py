/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class Widget {
    
    constructor() { 
        Widget.initialize(this);
    }

    
    static initialize(obj) { 
        obj['height'] = height;
        obj['id'] = id;
        obj['options'] = options;
        obj['type'] = type;
        obj['width'] = width;
        obj['x'] = x;
        obj['y'] = y;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Widget();

            if (data.hasOwnProperty('height')) {
                obj['height'] = data.height;
            }
            if (data.hasOwnProperty('height_mobile')) {
                obj['height_mobile'] = data.height_mobile;
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = data.id;
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = data.name;
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = data.options;
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = data.type;
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = data.variables;
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = data.width;
            }
            if (data.hasOwnProperty('width_mobile')) {
                obj['width_mobile'] = data.width_mobile;
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = data.x;
            }
            if (data.hasOwnProperty('x_mobile')) {
                obj['x_mobile'] = data.x_mobile;
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = data.y;
            }
            if (data.hasOwnProperty('y_mobile')) {
                obj['y_mobile'] = data.y_mobile;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Widget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['variables'])) {
            throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
        }

        return true;
    }


}

Widget.RequiredProperties = ["height", "id", "options", "type", "width", "x", "y"];


Widget.prototype['height'] = undefined;


Widget.prototype['height_mobile'] = undefined;


Widget.prototype['id'] = undefined;


Widget.prototype['name'] = undefined;


Widget.prototype['options'] = undefined;


Widget.prototype['type'] = undefined;


Widget.prototype['variables'] = undefined;


Widget.prototype['width'] = undefined;


Widget.prototype['width_mobile'] = undefined;


Widget.prototype['x'] = undefined;


Widget.prototype['x_mobile'] = undefined;


Widget.prototype['y'] = undefined;


Widget.prototype['y_mobile'] = undefined;






export default Widget;

