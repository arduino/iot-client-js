/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import from openapi_client.models.arduino_devicev2_status_event import ArduinoDevicev2StatusEvent from './from openapi_client.models.arduino_devicev2_status_event import ArduinoDevicev2StatusEvent';


class ArduinoDevicev2StatusEvents {
    
    constructor() { 
        ArduinoDevicev2StatusEvents.initialize(this);
    }

    
    static initialize(obj) { 
        obj['events'] = events;
        obj['id'] = id;
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2StatusEvents();

            if (data.hasOwnProperty('events')) {
                obj['events'] = data.events;
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = data.id;
            }
        }
        return obj;
    }

    
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDevicev2StatusEvents.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                ArduinoDevicev2StatusEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

ArduinoDevicev2StatusEvents.RequiredProperties = ["events", "id"];


ArduinoDevicev2StatusEvents.prototype['events'] = undefined;


ArduinoDevicev2StatusEvents.prototype['id'] = undefined;






export default ArduinoDevicev2StatusEvents;

