/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ArduinoIotClient);
  }
}(this, function(expect, ArduinoIotClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ArduinoIotClient.ArduinoDevicev2();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArduinoDevicev2', function() {
    it('should create an instance of ArduinoDevicev2', function() {
      // uncomment below and update the code to test ArduinoDevicev2
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be.a(ArduinoIotClient.ArduinoDevicev2);
    });

    it('should have the property connection_type (base name: "connection_type")', function() {
      // uncomment below and update the code to test the property connection_type
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property created_at (base name: "created_at")', function() {
      // uncomment below and update the code to test the property created_at
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property device_status (base name: "device_status")', function() {
      // uncomment below and update the code to test the property device_status
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property fqbn (base name: "fqbn")', function() {
      // uncomment below and update the code to test the property fqbn
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property href (base name: "href")', function() {
      // uncomment below and update the code to test the property href
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "label")', function() {
      // uncomment below and update the code to test the property label
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property last_activity_at (base name: "last_activity_at")', function() {
      // uncomment below and update the code to test the property last_activity_at
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property latest_wifi_fw_version (base name: "latest_wifi_fw_version")', function() {
      // uncomment below and update the code to test the property latest_wifi_fw_version
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property no_sketch (base name: "no_sketch")', function() {
      // uncomment below and update the code to test the property no_sketch
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property organization_id (base name: "organization_id")', function() {
      // uncomment below and update the code to test the property organization_id
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property ota_available (base name: "ota_available")', function() {
      // uncomment below and update the code to test the property ota_available
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property ota_compatible (base name: "ota_compatible")', function() {
      // uncomment below and update the code to test the property ota_compatible
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property required_wifi_fw_version (base name: "required_wifi_fw_version")', function() {
      // uncomment below and update the code to test the property required_wifi_fw_version
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property serial (base name: "serial")', function() {
      // uncomment below and update the code to test the property serial
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property thing (base name: "thing")', function() {
      // uncomment below and update the code to test the property thing
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property user_id (base name: "user_id")', function() {
      // uncomment below and update the code to test the property user_id
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property webhooks (base name: "webhooks")', function() {
      // uncomment below and update the code to test the property webhooks
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

    it('should have the property wifi_fw_version (base name: "wifi_fw_version")', function() {
      // uncomment below and update the code to test the property wifi_fw_version
      //var instance = new ArduinoIotClient.ArduinoDevicev2();
      //expect(instance).to.be();
    });

  });

}));
