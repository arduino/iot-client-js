/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArduinoProperty from './ArduinoProperty';

/**
 * The ArduinoThing model module.
 * @module model/ArduinoThing
 * @version 2.0.6
 */
class ArduinoThing {
    /**
     * Constructs a new <code>ArduinoThing</code>.
     * ArduinoThing media type (default view)
     * @alias module:model/ArduinoThing
     * @param href {String} The api reference of this thing
     * @param id {String} The id of the thing
     * @param name {String} The friendly name of the thing
     * @param timezone {String} Time zone of the thing
     * @param userId {String} The user id of the owner
     */
    constructor(href, id, name, timezone, userId) { 
        
        ArduinoThing.initialize(this, href, id, name, timezone, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href, id, name, timezone, userId) { 
        obj['href'] = href;
        obj['id'] = id;
        obj['name'] = name;
        obj['timezone'] = timezone;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>ArduinoThing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoThing} obj Optional instance to populate.
     * @return {module:model/ArduinoThing} The populated <code>ArduinoThing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoThing();

            if (data.hasOwnProperty('assistant')) {
                obj['assistant'] = ApiClient.convertToType(data['assistant'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('device_fqbn')) {
                obj['device_fqbn'] = ApiClient.convertToType(data['device_fqbn'], 'String');
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'String');
            }
            if (data.hasOwnProperty('device_name')) {
                obj['device_name'] = ApiClient.convertToType(data['device_name'], 'String');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [ArduinoProperty]);
            }
            if (data.hasOwnProperty('properties_count')) {
                obj['properties_count'] = ApiClient.convertToType(data['properties_count'], 'Number');
            }
            if (data.hasOwnProperty('sketch_id')) {
                obj['sketch_id'] = ApiClient.convertToType(data['sketch_id'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': Object});
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('webhook_active')) {
                obj['webhook_active'] = ApiClient.convertToType(data['webhook_active'], 'Boolean');
            }
            if (data.hasOwnProperty('webhook_uri')) {
                obj['webhook_uri'] = ApiClient.convertToType(data['webhook_uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoThing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoThing</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoThing.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assistant'] && !(typeof data['assistant'] === 'string' || data['assistant'] instanceof String)) {
            throw new Error("Expected the field `assistant` to be a primitive type in the JSON string but got " + data['assistant']);
        }
        // ensure the json data is a string
        if (data['device_fqbn'] && !(typeof data['device_fqbn'] === 'string' || data['device_fqbn'] instanceof String)) {
            throw new Error("Expected the field `device_fqbn` to be a primitive type in the JSON string but got " + data['device_fqbn']);
        }
        // ensure the json data is a string
        if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
            throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
        }
        // ensure the json data is a string
        if (data['device_name'] && !(typeof data['device_name'] === 'string' || data['device_name'] instanceof String)) {
            throw new Error("Expected the field `device_name` to be a primitive type in the JSON string but got " + data['device_name']);
        }
        // ensure the json data is a string
        if (data['device_type'] && !(typeof data['device_type'] === 'string' || data['device_type'] instanceof String)) {
            throw new Error("Expected the field `device_type` to be a primitive type in the JSON string but got " + data['device_type']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                ArduinoProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sketch_id'] && !(typeof data['sketch_id'] === 'string' || data['sketch_id'] instanceof String)) {
            throw new Error("Expected the field `sketch_id` to be a primitive type in the JSON string but got " + data['sketch_id']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['webhook_uri'] && !(typeof data['webhook_uri'] === 'string' || data['webhook_uri'] instanceof String)) {
            throw new Error("Expected the field `webhook_uri` to be a primitive type in the JSON string but got " + data['webhook_uri']);
        }

        return true;
    }


}

ArduinoThing.RequiredProperties = ["href", "id", "name", "timezone", "user_id"];

/**
 * The kind of voice assistant the thing is connected to, it can be ALEXA | GOOGLE | NONE
 * @member {module:model/ArduinoThing.AssistantEnum} assistant
 */
ArduinoThing.prototype['assistant'] = undefined;

/**
 * Creation date of the thing
 * @member {Date} created_at
 */
ArduinoThing.prototype['created_at'] = undefined;

/**
 * Delete date of the thing
 * @member {Date} deleted_at
 */
ArduinoThing.prototype['deleted_at'] = undefined;

/**
 * The fqbn of the attached device, if any
 * @member {String} device_fqbn
 */
ArduinoThing.prototype['device_fqbn'] = undefined;

/**
 * The id of the device
 * @member {String} device_id
 */
ArduinoThing.prototype['device_id'] = undefined;

/**
 * The name of the attached device, if any
 * @member {String} device_name
 */
ArduinoThing.prototype['device_name'] = undefined;

/**
 * The type of the attached device, if any
 * @member {String} device_type
 */
ArduinoThing.prototype['device_type'] = undefined;

/**
 * The api reference of this thing
 * @member {String} href
 */
ArduinoThing.prototype['href'] = undefined;

/**
 * The id of the thing
 * @member {String} id
 */
ArduinoThing.prototype['id'] = undefined;

/**
 * The friendly name of the thing
 * @member {String} name
 */
ArduinoThing.prototype['name'] = undefined;

/**
 * Id of the organization the thing belongs to
 * @member {String} organization_id
 */
ArduinoThing.prototype['organization_id'] = undefined;

/**
 * ArduinoPropertyCollection is the media type for an array of ArduinoProperty (default view)
 * @member {Array.<module:model/ArduinoProperty>} properties
 */
ArduinoThing.prototype['properties'] = undefined;

/**
 * The number of properties of the thing
 * @member {Number} properties_count
 */
ArduinoThing.prototype['properties_count'] = undefined;

/**
 * The id of the attached sketch
 * @member {String} sketch_id
 */
ArduinoThing.prototype['sketch_id'] = undefined;

/**
 * Tags of the thing
 * @member {Object.<String, Object>} tags
 */
ArduinoThing.prototype['tags'] = undefined;

/**
 * Time zone of the thing
 * @member {String} timezone
 */
ArduinoThing.prototype['timezone'] = undefined;

/**
 * Update date of the thing
 * @member {Date} updated_at
 */
ArduinoThing.prototype['updated_at'] = undefined;

/**
 * The user id of the owner
 * @member {String} user_id
 */
ArduinoThing.prototype['user_id'] = undefined;

/**
 * Webhook uri
 * @member {Boolean} webhook_active
 */
ArduinoThing.prototype['webhook_active'] = undefined;

/**
 * Webhook uri
 * @member {String} webhook_uri
 */
ArduinoThing.prototype['webhook_uri'] = undefined;





/**
 * Allowed values for the <code>assistant</code> property.
 * @enum {String}
 * @readonly
 */
ArduinoThing['AssistantEnum'] = {

    /**
     * value: "ALEXA"
     * @const
     */
    "ALEXA": "ALEXA",

    /**
     * value: "GOOGLE"
     * @const
     */
    "GOOGLE": "GOOGLE",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};



export default ArduinoThing;

