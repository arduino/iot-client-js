/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArduinoDevicev2Otaupload model module.
 * @module model/ArduinoDevicev2Otaupload
 * @version 2.0.2
 */
class ArduinoDevicev2Otaupload {
    /**
     * Constructs a new <code>ArduinoDevicev2Otaupload</code>.
     * ArduinoDevicev2Otaupload media type (default view)
     * @alias module:model/ArduinoDevicev2Otaupload
     * @param otaVersion {Number} OTA version
     */
    constructor(otaVersion) { 
        
        ArduinoDevicev2Otaupload.initialize(this, otaVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, otaVersion) { 
        obj['ota_version'] = otaVersion;
    }

    /**
     * Constructs a <code>ArduinoDevicev2Otaupload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDevicev2Otaupload} obj Optional instance to populate.
     * @return {module:model/ArduinoDevicev2Otaupload} The populated <code>ArduinoDevicev2Otaupload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2Otaupload();

            if (data.hasOwnProperty('file_sha')) {
                obj['file_sha'] = ApiClient.convertToType(data['file_sha'], 'String');
            }
            if (data.hasOwnProperty('ota_id')) {
                obj['ota_id'] = ApiClient.convertToType(data['ota_id'], 'String');
            }
            if (data.hasOwnProperty('ota_version')) {
                obj['ota_version'] = ApiClient.convertToType(data['ota_version'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoDevicev2Otaupload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoDevicev2Otaupload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoDevicev2Otaupload.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['file_sha'] && !(typeof data['file_sha'] === 'string' || data['file_sha'] instanceof String)) {
            throw new Error("Expected the field `file_sha` to be a primitive type in the JSON string but got " + data['file_sha']);
        }
        // ensure the json data is a string
        if (data['ota_id'] && !(typeof data['ota_id'] === 'string' || data['ota_id'] instanceof String)) {
            throw new Error("Expected the field `ota_id` to be a primitive type in the JSON string but got " + data['ota_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ArduinoDevicev2Otaupload.RequiredProperties = ["ota_version"];

/**
 * SHA256 of the uploaded file
 * @member {String} file_sha
 */
ArduinoDevicev2Otaupload.prototype['file_sha'] = undefined;

/**
 * OTA request id (only available from OTA version 2 and above)
 * @member {String} ota_id
 */
ArduinoDevicev2Otaupload.prototype['ota_id'] = undefined;

/**
 * OTA version
 * @member {Number} ota_version
 */
ArduinoDevicev2Otaupload.prototype['ota_version'] = undefined;

/**
 * OTA request status (only available from OTA version 2 and above)
 * @member {String} status
 */
ArduinoDevicev2Otaupload.prototype['status'] = undefined;






export default ArduinoDevicev2Otaupload;

