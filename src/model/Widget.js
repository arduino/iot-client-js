/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Widget model module.
 * @module model/Widget
 * @version 1.4.1
 */
class Widget {
    /**
     * Constructs a new <code>Widget</code>.
     * Widget describes a dashboard widget
     * @alias module:model/Widget
     * @param height {Number} Widget current height for desktop
     * @param id {String} The UUID of the widget, set by client
     * @param options {Object.<String, Object>} Widget options
     * @param type {String} The type of the widget
     * @param width {Number} Widget current width for desktop
     * @param x {Number} Widget x position for desktop
     * @param y {Number} Widget y position for desktop
     */
    constructor(height, id, options, type, width, x, y) { 
        
        Widget.initialize(this, height, id, options, type, width, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, height, id, options, type, width, x, y) { 
        obj['height'] = height;
        obj['id'] = id;
        obj['options'] = options;
        obj['type'] = type;
        obj['width'] = width;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>Widget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Widget} obj Optional instance to populate.
     * @return {module:model/Widget} The populated <code>Widget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Widget();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('height_mobile')) {
                obj['height_mobile'] = ApiClient.convertToType(data['height_mobile'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], {'String': Object});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], ['String']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('width_mobile')) {
                obj['width_mobile'] = ApiClient.convertToType(data['width_mobile'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('x_mobile')) {
                obj['x_mobile'] = ApiClient.convertToType(data['x_mobile'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('y_mobile')) {
                obj['y_mobile'] = ApiClient.convertToType(data['y_mobile'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Widget current height for desktop
 * @member {Number} height
 */
Widget.prototype['height'] = undefined;

/**
 * Widget current height for mobile
 * @member {Number} height_mobile
 */
Widget.prototype['height_mobile'] = undefined;

/**
 * The UUID of the widget, set by client
 * @member {String} id
 */
Widget.prototype['id'] = undefined;

/**
 * The name of the widget
 * @member {String} name
 */
Widget.prototype['name'] = undefined;

/**
 * Widget options
 * @member {Object.<String, Object>} options
 */
Widget.prototype['options'] = undefined;

/**
 * The type of the widget
 * @member {String} type
 */
Widget.prototype['type'] = undefined;

/**
 * @member {Array.<String>} variables
 */
Widget.prototype['variables'] = undefined;

/**
 * Widget current width for desktop
 * @member {Number} width
 */
Widget.prototype['width'] = undefined;

/**
 * Widget current width for mobile
 * @member {Number} width_mobile
 */
Widget.prototype['width_mobile'] = undefined;

/**
 * Widget x position for desktop
 * @member {Number} x
 */
Widget.prototype['x'] = undefined;

/**
 * Widget x position for mobile
 * @member {Number} x_mobile
 */
Widget.prototype['x_mobile'] = undefined;

/**
 * Widget y position for desktop
 * @member {Number} y
 */
Widget.prototype['y'] = undefined;

/**
 * Widget y position for mobile
 * @member {Number} y_mobile
 */
Widget.prototype['y_mobile'] = undefined;






export default Widget;

