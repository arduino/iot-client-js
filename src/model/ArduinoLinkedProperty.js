/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArduinoProperty from './ArduinoProperty';

/**
 * The ArduinoLinkedProperty model module.
 * @module model/ArduinoLinkedProperty
 * @version 3.0.0
 */
class ArduinoLinkedProperty {
    /**
     * Constructs a new <code>ArduinoLinkedProperty</code>.
     * ArduinoLinked_property media type (default view)
     * @alias module:model/ArduinoLinkedProperty
     * @param property {module:model/ArduinoProperty} 
     * @param status {module:model/ArduinoLinkedProperty.StatusEnum} The status of the linked property
     */
    constructor(property, status) { 
        
        ArduinoLinkedProperty.initialize(this, property, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, property, status) { 
        obj['property'] = property;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>ArduinoLinkedProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoLinkedProperty} obj Optional instance to populate.
     * @return {module:model/ArduinoLinkedProperty} The populated <code>ArduinoLinkedProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoLinkedProperty();

            if (data.hasOwnProperty('property')) {
                obj['property'] = ArduinoProperty.constructFromObject(data['property']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoLinkedProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoLinkedProperty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoLinkedProperty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `property`
        if (data['property']) { // data not null
          ArduinoProperty.validateJSON(data['property']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ArduinoLinkedProperty.RequiredProperties = ["property", "status"];

/**
 * @member {module:model/ArduinoProperty} property
 */
ArduinoLinkedProperty.prototype['property'] = undefined;

/**
 * The status of the linked property
 * @member {module:model/ArduinoLinkedProperty.StatusEnum} status
 */
ArduinoLinkedProperty.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ArduinoLinkedProperty['StatusEnum'] = {

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "WRONG_TYPE"
     * @const
     */
    "WRONG_TYPE": "WRONG_TYPE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default ArduinoLinkedProperty;

