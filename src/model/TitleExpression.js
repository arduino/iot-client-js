/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Variable from './Variable';

/**
 * The TitleExpression model module.
 * @module model/TitleExpression
 * @version 3.0.0
 */
class TitleExpression {
    /**
     * Constructs a new <code>TitleExpression</code>.
     * @alias module:model/TitleExpression
     * @param expression {String} Content of the title (or subject) of a message, variables are allowed
     */
    constructor(expression) { 
        
        TitleExpression.initialize(this, expression);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression) { 
        obj['expression'] = expression;
    }

    /**
     * Constructs a <code>TitleExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TitleExpression} obj Optional instance to populate.
     * @return {module:model/TitleExpression} The populated <code>TitleExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TitleExpression();

            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], [Variable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TitleExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TitleExpression</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TitleExpression.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        if (data['variables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variables'])) {
                throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
            }
            // validate the optional field `variables` (array)
            for (const item of data['variables']) {
                Variable.validateJSON(item);
            };
        }

        return true;
    }


}

TitleExpression.RequiredProperties = ["expression"];

/**
 * Content of the title (or subject) of a message, variables are allowed
 * @member {String} expression
 */
TitleExpression.prototype['expression'] = undefined;

/**
 * Variables used by the expression
 * @member {Array.<module:model/Variable>} variables
 */
TitleExpression.prototype['variables'] = undefined;






export default TitleExpression;

