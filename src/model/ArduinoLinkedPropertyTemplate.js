/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArduinoLinkedPropertyTemplate model module.
 * @module model/ArduinoLinkedPropertyTemplate
 * @version 3.0.0
 */
class ArduinoLinkedPropertyTemplate {
    /**
     * Constructs a new <code>ArduinoLinkedPropertyTemplate</code>.
     * ArduinoLinked_property_template media type (default view)
     * @alias module:model/ArduinoLinkedPropertyTemplate
     * @param propertyId {String} The property the trigger is associated to
     * @param thingId {String} The thing the trigger is associated to
     */
    constructor(propertyId, thingId) { 
        
        ArduinoLinkedPropertyTemplate.initialize(this, propertyId, thingId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, propertyId, thingId) { 
        obj['property_id'] = propertyId;
        obj['thing_id'] = thingId;
    }

    /**
     * Constructs a <code>ArduinoLinkedPropertyTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoLinkedPropertyTemplate} obj Optional instance to populate.
     * @return {module:model/ArduinoLinkedPropertyTemplate} The populated <code>ArduinoLinkedPropertyTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoLinkedPropertyTemplate();

            if (data.hasOwnProperty('property_id')) {
                obj['property_id'] = ApiClient.convertToType(data['property_id'], 'String');
            }
            if (data.hasOwnProperty('thing_id')) {
                obj['thing_id'] = ApiClient.convertToType(data['thing_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoLinkedPropertyTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoLinkedPropertyTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoLinkedPropertyTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['property_id'] && !(typeof data['property_id'] === 'string' || data['property_id'] instanceof String)) {
            throw new Error("Expected the field `property_id` to be a primitive type in the JSON string but got " + data['property_id']);
        }
        // ensure the json data is a string
        if (data['thing_id'] && !(typeof data['thing_id'] === 'string' || data['thing_id'] instanceof String)) {
            throw new Error("Expected the field `thing_id` to be a primitive type in the JSON string but got " + data['thing_id']);
        }

        return true;
    }


}

ArduinoLinkedPropertyTemplate.RequiredProperties = ["property_id", "thing_id"];

/**
 * The property the trigger is associated to
 * @member {String} property_id
 */
ArduinoLinkedPropertyTemplate.prototype['property_id'] = undefined;

/**
 * The thing the trigger is associated to
 * @member {String} thing_id
 */
ArduinoLinkedPropertyTemplate.prototype['thing_id'] = undefined;






export default ArduinoLinkedPropertyTemplate;

