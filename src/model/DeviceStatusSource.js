/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceStatusSource model module.
 * @module model/DeviceStatusSource
 * @version 3.0.0
 */
class DeviceStatusSource {
    /**
     * Constructs a new <code>DeviceStatusSource</code>.
     * @alias module:model/DeviceStatusSource
     * @param criteria {module:model/DeviceStatusSource.CriteriaEnum} The matching criteria of the trigger, this allows to interpret device_ids as an inclusion or exclusion list
     */
    constructor(criteria) { 
        
        DeviceStatusSource.initialize(this, criteria);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criteria) { 
        obj['criteria'] = criteria;
    }

    /**
     * Constructs a <code>DeviceStatusSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceStatusSource} obj Optional instance to populate.
     * @return {module:model/DeviceStatusSource} The populated <code>DeviceStatusSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceStatusSource();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], 'String');
            }
            if (data.hasOwnProperty('device_ids')) {
                obj['device_ids'] = ApiClient.convertToType(data['device_ids'], ['String']);
            }
            if (data.hasOwnProperty('grace_period_offline')) {
                obj['grace_period_offline'] = ApiClient.convertToType(data['grace_period_offline'], 'Number');
            }
            if (data.hasOwnProperty('grace_period_online')) {
                obj['grace_period_online'] = ApiClient.convertToType(data['grace_period_online'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceStatusSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceStatusSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceStatusSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['criteria'] && !(typeof data['criteria'] === 'string' || data['criteria'] instanceof String)) {
            throw new Error("Expected the field `criteria` to be a primitive type in the JSON string but got " + data['criteria']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['device_ids'])) {
            throw new Error("Expected the field `device_ids` to be an array in the JSON data but got " + data['device_ids']);
        }

        return true;
    }


}

DeviceStatusSource.RequiredProperties = ["criteria"];

/**
 * The matching criteria of the trigger, this allows to interpret device_ids as an inclusion or exclusion list
 * @member {module:model/DeviceStatusSource.CriteriaEnum} criteria
 */
DeviceStatusSource.prototype['criteria'] = undefined;

/**
 * A list of device IDs to be included in or excluded from the trigger (see criteria). Mutually exclusive with property_id.
 * @member {Array.<String>} device_ids
 */
DeviceStatusSource.prototype['device_ids'] = undefined;

/**
 * Amount of seconds the trigger will wait before the device will be considered disconnected (requires 'device_id')
 * @member {Number} grace_period_offline
 */
DeviceStatusSource.prototype['grace_period_offline'] = undefined;

/**
 * Amount of seconds the trigger will wait before the device will be considered connected (requires 'device_id')
 * @member {Number} grace_period_online
 */
DeviceStatusSource.prototype['grace_period_online'] = undefined;





/**
 * Allowed values for the <code>criteria</code> property.
 * @enum {String}
 * @readonly
 */
DeviceStatusSource['CriteriaEnum'] = {

    /**
     * value: "INCLUDE"
     * @const
     */
    "INCLUDE": "INCLUDE",

    /**
     * value: "EXCLUDE"
     * @const
     */
    "EXCLUDE": "EXCLUDE"
};



export default DeviceStatusSource;

