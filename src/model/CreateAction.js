/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailAction from './EmailAction';
import PushAction from './PushAction';

/**
 * The CreateAction model module.
 * @module model/CreateAction
 * @version 3.0.0
 */
class CreateAction {
    /**
     * Constructs a new <code>CreateAction</code>.
     * @alias module:model/CreateAction
     * @param kind {module:model/CreateAction.KindEnum} The kind of the action
     * @param name {String} The name of the action
     */
    constructor(kind, name) { 
        
        CreateAction.initialize(this, kind, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, name) { 
        obj['kind'] = kind;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAction} obj Optional instance to populate.
     * @return {module:model/CreateAction} The populated <code>CreateAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAction();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = EmailAction.constructFromObject(data['email']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('push_notification')) {
                obj['push_notification'] = PushAction.constructFromObject(data['push_notification']);
            }
            if (data.hasOwnProperty('trigger_id')) {
                obj['trigger_id'] = ApiClient.convertToType(data['trigger_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `email`
        if (data['email']) { // data not null
          EmailAction.validateJSON(data['email']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // validate the optional field `push_notification`
        if (data['push_notification']) { // data not null
          PushAction.validateJSON(data['push_notification']);
        }
        // ensure the json data is a string
        if (data['trigger_id'] && !(typeof data['trigger_id'] === 'string' || data['trigger_id'] instanceof String)) {
            throw new Error("Expected the field `trigger_id` to be a primitive type in the JSON string but got " + data['trigger_id']);
        }

        return true;
    }


}

CreateAction.RequiredProperties = ["kind", "name"];

/**
 * The description of the trigger
 * @member {String} description
 */
CreateAction.prototype['description'] = undefined;

/**
 * @member {module:model/EmailAction} email
 */
CreateAction.prototype['email'] = undefined;

/**
 * The kind of the action
 * @member {module:model/CreateAction.KindEnum} kind
 */
CreateAction.prototype['kind'] = undefined;

/**
 * The name of the action
 * @member {String} name
 */
CreateAction.prototype['name'] = undefined;

/**
 * Id of the organization the trigger belongs to
 * @member {String} organization_id
 */
CreateAction.prototype['organization_id'] = undefined;

/**
 * @member {module:model/PushAction} push_notification
 */
CreateAction.prototype['push_notification'] = undefined;

/**
 * Id of the trigger the action is associated to
 * @member {String} trigger_id
 */
CreateAction.prototype['trigger_id'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
CreateAction['KindEnum'] = {

    /**
     * value: "NOTIFY-EMAIL"
     * @const
     */
    "EMAIL": "NOTIFY-EMAIL",

    /**
     * value: "NOTIFY-PUSH"
     * @const
     */
    "PUSH": "NOTIFY-PUSH"
};



export default CreateAction;

