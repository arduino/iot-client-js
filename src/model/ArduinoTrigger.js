/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArduinoAction from './ArduinoAction';
import DeviceStatusSource from './DeviceStatusSource';

/**
 * The ArduinoTrigger model module.
 * @module model/ArduinoTrigger
 * @version 3.0.0
 */
class ArduinoTrigger {
    /**
     * Constructs a new <code>ArduinoTrigger</code>.
     * ArduinoTrigger media type (default view)
     * @alias module:model/ArduinoTrigger
     * @param name {String} The name of the trigger
     */
    constructor(name) { 
        
        ArduinoTrigger.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ArduinoTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoTrigger} obj Optional instance to populate.
     * @return {module:model/ArduinoTrigger} The populated <code>ArduinoTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoTrigger();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [ArduinoAction]);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_status_source')) {
                obj['device_status_source'] = DeviceStatusSource.constructFromObject(data['device_status_source']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('property_id')) {
                obj['property_id'] = ApiClient.convertToType(data['property_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoTrigger</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoTrigger.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                ArduinoAction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_by'] && !(typeof data['created_by'] === 'string' || data['created_by'] instanceof String)) {
            throw new Error("Expected the field `created_by` to be a primitive type in the JSON string but got " + data['created_by']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `device_status_source`
        if (data['device_status_source']) { // data not null
          DeviceStatusSource.validateJSON(data['device_status_source']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['property_id'] && !(typeof data['property_id'] === 'string' || data['property_id'] instanceof String)) {
            throw new Error("Expected the field `property_id` to be a primitive type in the JSON string but got " + data['property_id']);
        }

        return true;
    }


}

ArduinoTrigger.RequiredProperties = ["name"];

/**
 * A list of actions associated with the trigger
 * @member {Array.<module:model/ArduinoAction>} actions
 */
ArduinoTrigger.prototype['actions'] = undefined;

/**
 * Is true if the trigger is enabled
 * @member {Boolean} active
 */
ArduinoTrigger.prototype['active'] = undefined;

/**
 * Creation date of the trigger
 * @member {Date} created_at
 */
ArduinoTrigger.prototype['created_at'] = undefined;

/**
 * Id of the user who last updated the trigger
 * @member {String} created_by
 */
ArduinoTrigger.prototype['created_by'] = undefined;

/**
 * Deletion date of the trigger
 * @member {Date} deleted_at
 */
ArduinoTrigger.prototype['deleted_at'] = undefined;

/**
 * The description of the trigger
 * @member {String} description
 */
ArduinoTrigger.prototype['description'] = undefined;

/**
 * @member {module:model/DeviceStatusSource} device_status_source
 */
ArduinoTrigger.prototype['device_status_source'] = undefined;

/**
 * The id of the trigger
 * @member {String} id
 */
ArduinoTrigger.prototype['id'] = undefined;

/**
 * The name of the trigger
 * @member {String} name
 */
ArduinoTrigger.prototype['name'] = undefined;

/**
 * Id of the organization the trigger belongs to
 * @member {String} organization_id
 */
ArduinoTrigger.prototype['organization_id'] = undefined;

/**
 * Id of the property the trigger is associated to (mutually exclusive with 'device_status_source')
 * @member {String} property_id
 */
ArduinoTrigger.prototype['property_id'] = undefined;

/**
 * Update date of the trigger
 * @member {Date} updated_at
 */
ArduinoTrigger.prototype['updated_at'] = undefined;






export default ArduinoTrigger;

