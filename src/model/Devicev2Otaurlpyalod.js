/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Devicev2Otaurlpyalod model module.
 * @module model/Devicev2Otaurlpyalod
 * @version 3.0.0
 */
class Devicev2Otaurlpyalod {
    /**
     * Constructs a new <code>Devicev2Otaurlpyalod</code>.
     * @alias module:model/Devicev2Otaurlpyalod
     */
    constructor() { 
        
        Devicev2Otaurlpyalod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Devicev2Otaurlpyalod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Devicev2Otaurlpyalod} obj Optional instance to populate.
     * @return {module:model/Devicev2Otaurlpyalod} The populated <code>Devicev2Otaurlpyalod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Devicev2Otaurlpyalod();

            if (data.hasOwnProperty('binary_key')) {
                obj['binary_key'] = ApiClient.convertToType(data['binary_key'], 'String');
            }
            if (data.hasOwnProperty('sha256')) {
                obj['sha256'] = ApiClient.convertToType(data['sha256'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Devicev2Otaurlpyalod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Devicev2Otaurlpyalod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['binary_key'] && !(typeof data['binary_key'] === 'string' || data['binary_key'] instanceof String)) {
            throw new Error("Expected the field `binary_key` to be a primitive type in the JSON string but got " + data['binary_key']);
        }
        // ensure the json data is a string
        if (data['sha256'] && !(typeof data['sha256'] === 'string' || data['sha256'] instanceof String)) {
            throw new Error("Expected the field `sha256` to be a primitive type in the JSON string but got " + data['sha256']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * The object key of the binary
 * @member {String} binary_key
 */
Devicev2Otaurlpyalod.prototype['binary_key'] = undefined;

/**
 * The sha256 of the binary
 * @member {String} sha256
 */
Devicev2Otaurlpyalod.prototype['sha256'] = undefined;

/**
 * The id of the user who is requesting the url
 * @member {String} user_id
 */
Devicev2Otaurlpyalod.prototype['user_id'] = undefined;






export default Devicev2Otaurlpyalod;

