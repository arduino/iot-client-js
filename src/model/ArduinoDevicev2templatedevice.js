/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArduinoDevicev2templatedevice model module.
 * @module model/ArduinoDevicev2templatedevice
 * @version 2.0.4
 */
class ArduinoDevicev2templatedevice {
    /**
     * Constructs a new <code>ArduinoDevicev2templatedevice</code>.
     * ArduinoDevicev2templatedevice media type (default view)
     * @alias module:model/ArduinoDevicev2templatedevice
     */
    constructor() { 
        
        ArduinoDevicev2templatedevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArduinoDevicev2templatedevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDevicev2templatedevice} obj Optional instance to populate.
     * @return {module:model/ArduinoDevicev2templatedevice} The populated <code>ArduinoDevicev2templatedevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoDevicev2templatedevice();

            if (data.hasOwnProperty('fqbn')) {
                obj['fqbn'] = ApiClient.convertToType(data['fqbn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoDevicev2templatedevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoDevicev2templatedevice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fqbn'] && !(typeof data['fqbn'] === 'string' || data['fqbn'] instanceof String)) {
            throw new Error("Expected the field `fqbn` to be a primitive type in the JSON string but got " + data['fqbn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The device fqbn
 * @member {String} fqbn
 */
ArduinoDevicev2templatedevice.prototype['fqbn'] = undefined;

/**
 * The device type name
 * @member {String} name
 */
ArduinoDevicev2templatedevice.prototype['name'] = undefined;






export default ArduinoDevicev2templatedevice;

