/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Variable model module.
 * @module model/Variable
 * @version 3.0.0
 */
class Variable {
    /**
     * Constructs a new <code>Variable</code>.
     * @alias module:model/Variable
     * @param attribute {module:model/Variable.AttributeEnum} The template expression that extracts the value from the respective entity
     * @param entity {module:model/Variable.EntityEnum} Type of the entity being referenced
     * @param placeholder {String} Name of the variable as referenced by the expression
     */
    constructor(attribute, entity, placeholder) { 
        
        Variable.initialize(this, attribute, entity, placeholder);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attribute, entity, placeholder) { 
        obj['attribute'] = attribute;
        obj['entity'] = entity;
        obj['placeholder'] = placeholder;
    }

    /**
     * Constructs a <code>Variable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Variable} obj Optional instance to populate.
     * @return {module:model/Variable} The populated <code>Variable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Variable();

            if (data.hasOwnProperty('attribute')) {
                obj['attribute'] = ApiClient.convertToType(data['attribute'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('placeholder')) {
                obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
            }
            if (data.hasOwnProperty('property_id')) {
                obj['property_id'] = ApiClient.convertToType(data['property_id'], 'String');
            }
            if (data.hasOwnProperty('thing_id')) {
                obj['thing_id'] = ApiClient.convertToType(data['thing_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Variable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Variable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Variable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute'] && !(typeof data['attribute'] === 'string' || data['attribute'] instanceof String)) {
            throw new Error("Expected the field `attribute` to be a primitive type in the JSON string but got " + data['attribute']);
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['placeholder'] && !(typeof data['placeholder'] === 'string' || data['placeholder'] instanceof String)) {
            throw new Error("Expected the field `placeholder` to be a primitive type in the JSON string but got " + data['placeholder']);
        }
        // ensure the json data is a string
        if (data['property_id'] && !(typeof data['property_id'] === 'string' || data['property_id'] instanceof String)) {
            throw new Error("Expected the field `property_id` to be a primitive type in the JSON string but got " + data['property_id']);
        }
        // ensure the json data is a string
        if (data['thing_id'] && !(typeof data['thing_id'] === 'string' || data['thing_id'] instanceof String)) {
            throw new Error("Expected the field `thing_id` to be a primitive type in the JSON string but got " + data['thing_id']);
        }

        return true;
    }


}

Variable.RequiredProperties = ["attribute", "entity", "placeholder"];

/**
 * The template expression that extracts the value from the respective entity
 * @member {module:model/Variable.AttributeEnum} attribute
 */
Variable.prototype['attribute'] = undefined;

/**
 * Type of the entity being referenced
 * @member {module:model/Variable.EntityEnum} entity
 */
Variable.prototype['entity'] = undefined;

/**
 * The ID of the referenced entity
 * @member {String} id
 */
Variable.prototype['id'] = undefined;

/**
 * Name of the variable as referenced by the expression
 * @member {String} placeholder
 */
Variable.prototype['placeholder'] = undefined;

/**
 * The ID of the property referenced entity
 * @member {String} property_id
 */
Variable.prototype['property_id'] = undefined;

/**
 * The ID of the thing referenced entity
 * @member {String} thing_id
 */
Variable.prototype['thing_id'] = undefined;





/**
 * Allowed values for the <code>attribute</code> property.
 * @enum {String}
 * @readonly
 */
Variable['AttributeEnum'] = {

    /**
     * value: "ID"
     * @const
     */
    "ID": "ID",

    /**
     * value: "NAME"
     * @const
     */
    "NAME": "NAME",

    /**
     * value: "VALUE"
     * @const
     */
    "VALUE": "VALUE",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "USERNAME"
     * @const
     */
    "USERNAME": "USERNAME",

    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",

    /**
     * value: "STATUS"
     * @const
     */
    "STATUS": "STATUS"
};


/**
 * Allowed values for the <code>entity</code> property.
 * @enum {String}
 * @readonly
 */
Variable['EntityEnum'] = {

    /**
     * value: "RECIPIENT"
     * @const
     */
    "RECIPIENT": "RECIPIENT",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "DEVICE"
     * @const
     */
    "DEVICE": "DEVICE",

    /**
     * value: "THING"
     * @const
     */
    "THING": "THING",

    /**
     * value: "PROPERTY"
     * @const
     */
    "PROPERTY": "PROPERTY",

    /**
     * value: "TRIGGERING_DEVICE"
     * @const
     */
    "TRIGGERING_DEVICE": "TRIGGERING_DEVICE"
};



export default Variable;

