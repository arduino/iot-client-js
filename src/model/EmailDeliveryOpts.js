/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserRecipient from './UserRecipient';

/**
 * The EmailDeliveryOpts model module.
 * @module model/EmailDeliveryOpts
 * @version 3.0.0
 */
class EmailDeliveryOpts {
    /**
     * Constructs a new <code>EmailDeliveryOpts</code>.
     * @alias module:model/EmailDeliveryOpts
     * @param to {Array.<module:model/UserRecipient>} The \"to:\" field of an e-mail
     */
    constructor(to) { 
        
        EmailDeliveryOpts.initialize(this, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, to) { 
        obj['to'] = to;
    }

    /**
     * Constructs a <code>EmailDeliveryOpts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailDeliveryOpts} obj Optional instance to populate.
     * @return {module:model/EmailDeliveryOpts} The populated <code>EmailDeliveryOpts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailDeliveryOpts();

            if (data.hasOwnProperty('bcc')) {
                obj['bcc'] = ApiClient.convertToType(data['bcc'], [UserRecipient]);
            }
            if (data.hasOwnProperty('cc')) {
                obj['cc'] = ApiClient.convertToType(data['cc'], [UserRecipient]);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], [UserRecipient]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailDeliveryOpts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailDeliveryOpts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmailDeliveryOpts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['bcc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bcc'])) {
                throw new Error("Expected the field `bcc` to be an array in the JSON data but got " + data['bcc']);
            }
            // validate the optional field `bcc` (array)
            for (const item of data['bcc']) {
                UserRecipient.validateJSON(item);
            };
        }
        if (data['cc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cc'])) {
                throw new Error("Expected the field `cc` to be an array in the JSON data but got " + data['cc']);
            }
            // validate the optional field `cc` (array)
            for (const item of data['cc']) {
                UserRecipient.validateJSON(item);
            };
        }
        if (data['to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to'])) {
                throw new Error("Expected the field `to` to be an array in the JSON data but got " + data['to']);
            }
            // validate the optional field `to` (array)
            for (const item of data['to']) {
                UserRecipient.validateJSON(item);
            };
        }

        return true;
    }


}

EmailDeliveryOpts.RequiredProperties = ["to"];

/**
 * The \"bcc:\" field of an e-mail
 * @member {Array.<module:model/UserRecipient>} bcc
 */
EmailDeliveryOpts.prototype['bcc'] = undefined;

/**
 * The \"cc:\" field of an e-mail
 * @member {Array.<module:model/UserRecipient>} cc
 */
EmailDeliveryOpts.prototype['cc'] = undefined;

/**
 * The \"to:\" field of an e-mail
 * @member {Array.<module:model/UserRecipient>} to
 */
EmailDeliveryOpts.prototype['to'] = undefined;






export default EmailDeliveryOpts;

