/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Template model module.
 * @module model/Template
 * @version 2.0.5
 */
class Template {
    /**
     * Constructs a new <code>Template</code>.
     * TemplatePayload describes the needed attribute to apply a template
     * @alias module:model/Template
     * @param templateName {String} The name of the directory on S3 bucket containing the template
     */
    constructor(templateName) { 
        
        Template.initialize(this, templateName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, templateName) { 
        obj['template_name'] = templateName;
    }

    /**
     * Constructs a <code>Template</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Template} obj Optional instance to populate.
     * @return {module:model/Template} The populated <code>Template</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Template();

            if (data.hasOwnProperty('custom_template_id')) {
                obj['custom_template_id'] = ApiClient.convertToType(data['custom_template_id'], 'String');
            }
            if (data.hasOwnProperty('prefix_name')) {
                obj['prefix_name'] = ApiClient.convertToType(data['prefix_name'], 'String');
            }
            if (data.hasOwnProperty('template_name')) {
                obj['template_name'] = ApiClient.convertToType(data['template_name'], 'String');
            }
            if (data.hasOwnProperty('things_options')) {
                obj['things_options'] = ApiClient.convertToType(data['things_options'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Template</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Template</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Template.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['custom_template_id'] && !(typeof data['custom_template_id'] === 'string' || data['custom_template_id'] instanceof String)) {
            throw new Error("Expected the field `custom_template_id` to be a primitive type in the JSON string but got " + data['custom_template_id']);
        }
        // ensure the json data is a string
        if (data['prefix_name'] && !(typeof data['prefix_name'] === 'string' || data['prefix_name'] instanceof String)) {
            throw new Error("Expected the field `prefix_name` to be a primitive type in the JSON string but got " + data['prefix_name']);
        }
        // ensure the json data is a string
        if (data['template_name'] && !(typeof data['template_name'] === 'string' || data['template_name'] instanceof String)) {
            throw new Error("Expected the field `template_name` to be a primitive type in the JSON string but got " + data['template_name']);
        }

        return true;
    }


}

Template.RequiredProperties = ["template_name"];

/**
 * The name of the directory on S3 bucket containing the user's template
 * @member {String} custom_template_id
 */
Template.prototype['custom_template_id'] = undefined;

/**
 * The prefix to apply to the names of the generated resources
 * @member {String} prefix_name
 */
Template.prototype['prefix_name'] = undefined;

/**
 * The name of the directory on S3 bucket containing the template
 * @member {String} template_name
 */
Template.prototype['template_name'] = undefined;

/**
 * @member {Object.<String, Object>} things_options
 */
Template.prototype['things_options'] = undefined;






export default Template;

