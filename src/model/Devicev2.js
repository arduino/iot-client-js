/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Devicev2 model module.
 * @module model/Devicev2
 * @version 1.3.4
 */
class Devicev2 {
    /**
     * Constructs a new <code>Devicev2</code>.
     * DeviceV2 describes a device.
     * @alias module:model/Devicev2
     */
    constructor() { 
        
        Devicev2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Devicev2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Devicev2} obj Optional instance to populate.
     * @return {module:model/Devicev2} The populated <code>Devicev2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Devicev2();

            if (data.hasOwnProperty('fqbn')) {
                obj['fqbn'] = ApiClient.convertToType(data['fqbn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The fully qualified board name
 * @member {String} fqbn
 */
Devicev2.prototype['fqbn'] = undefined;

/**
 * The friendly name of the device
 * @member {String} name
 */
Devicev2.prototype['name'] = undefined;

/**
 * The serial uuid of the device
 * @member {String} serial
 */
Devicev2.prototype['serial'] = undefined;

/**
 * The type of the device
 * @member {module:model/Devicev2.TypeEnum} type
 */
Devicev2.prototype['type'] = undefined;

/**
 * The user_id associated to the device. If absent it will be inferred from the authentication header
 * @member {String} user_id
 */
Devicev2.prototype['user_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Devicev2['TypeEnum'] = {

    /**
     * value: "mkrwifi1010"
     * @const
     */
    "mkrwifi1010": "mkrwifi1010",

    /**
     * value: "mkr1000"
     * @const
     */
    "mkr1000": "mkr1000",

    /**
     * value: "nano_33_iot"
     * @const
     */
    "nano_33_iot": "nano_33_iot",

    /**
     * value: "mkrgsm1400"
     * @const
     */
    "mkrgsm1400": "mkrgsm1400",

    /**
     * value: "mkrwan1310"
     * @const
     */
    "mkrwan1310": "mkrwan1310",

    /**
     * value: "mkrwan1300"
     * @const
     */
    "mkrwan1300": "mkrwan1300",

    /**
     * value: "mkrnb1500"
     * @const
     */
    "mkrnb1500": "mkrnb1500",

    /**
     * value: "lora-device"
     * @const
     */
    "lora-device": "lora-device",

    /**
     * value: "login_and_secretkey_wifi"
     * @const
     */
    "login_and_secretkey_wifi": "login_and_secretkey_wifi"
};



export default Devicev2;

