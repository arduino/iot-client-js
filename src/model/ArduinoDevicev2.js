/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ArduinoDevicev2Webhook'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ArduinoDevicev2Webhook'));
  } else {
    // Browser globals (root is window)
    if (!root.IotApi) {
      root.IotApi = {};
    }
    root.IotApi.ArduinoDevicev2 = factory(root.IotApi.ApiClient, root.IotApi.ArduinoDevicev2Webhook);
  }
}(this, function(ApiClient, ArduinoDevicev2Webhook) {
  'use strict';



  /**
   * The ArduinoDevicev2 model module.
   * @module model/ArduinoDevicev2
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>ArduinoDevicev2</code>.
   * ArduinoDevicev2 media type (default view)
   * @alias module:model/ArduinoDevicev2
   * @class
   * @param href {String} The api reference of this device
   * @param id {String} The arn of the device
   * @param name {String} The friendly name of the device
   * @param serial {String} The serial uuid of the device
   * @param type {String} The type of the device
   * @param userId {String} The id of the user
   */
  var exports = function(href, id, name, serial, type, userId) {
    var _this = this;

    _this['href'] = href;
    _this['id'] = id;
    _this['name'] = name;
    _this['serial'] = serial;
    _this['type'] = type;
    _this['user_id'] = userId;
  };

  /**
   * Constructs a <code>ArduinoDevicev2</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ArduinoDevicev2} obj Optional instance to populate.
   * @return {module:model/ArduinoDevicev2} The populated <code>ArduinoDevicev2</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('href')) {
        obj['href'] = ApiClient.convertToType(data['href'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('serial')) {
        obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('user_id')) {
        obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
      }
      if (data.hasOwnProperty('webhooks')) {
        obj['webhooks'] = ApiClient.convertToType(data['webhooks'], [ArduinoDevicev2Webhook]);
      }
    }
    return obj;
  }

  /**
   * Creation date of the device
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * The api reference of this device
   * @member {String} href
   */
  exports.prototype['href'] = undefined;
  /**
   * The arn of the device
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The metadata of the device
   * @member {Object.<String, Object>} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * The friendly name of the device
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The serial uuid of the device
   * @member {String} serial
   */
  exports.prototype['serial'] = undefined;
  /**
   * The type of the device
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The id of the user
   * @member {String} user_id
   */
  exports.prototype['user_id'] = undefined;
  /**
   * ArduinoDevicev2WebhookCollection is the media type for an array of ArduinoDevicev2Webhook (default view)
   * @member {Array.<module:model/ArduinoDevicev2Webhook>} webhooks
   */
  exports.prototype['webhooks'] = undefined;



  return exports;
}));


