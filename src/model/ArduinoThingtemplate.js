/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArduinoTemplateproperty from './ArduinoTemplateproperty';
import Tag from './Tag';

/**
 * The ArduinoThingtemplate model module.
 * @module model/ArduinoThingtemplate
 * @version 2.0.2
 */
class ArduinoThingtemplate {
    /**
     * Constructs a new <code>ArduinoThingtemplate</code>.
     * ArduinoThingtemplate media type (default view)
     * @alias module:model/ArduinoThingtemplate
     * @param name {String} The friendly name of the thing
     * @param timezone {String} Time zone of the thing
     */
    constructor(name, timezone) { 
        
        ArduinoThingtemplate.initialize(this, name, timezone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, timezone) { 
        obj['name'] = name;
        obj['timezone'] = timezone;
    }

    /**
     * Constructs a <code>ArduinoThingtemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoThingtemplate} obj Optional instance to populate.
     * @return {module:model/ArduinoThingtemplate} The populated <code>ArduinoThingtemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArduinoThingtemplate();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [ArduinoTemplateproperty]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('webhook_uri')) {
                obj['webhook_uri'] = ApiClient.convertToType(data['webhook_uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoThingtemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoThingtemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArduinoThingtemplate.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                ArduinoTemplateproperty.validateJSON(item);
            };
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['webhook_uri'] && !(typeof data['webhook_uri'] === 'string' || data['webhook_uri'] instanceof String)) {
            throw new Error("Expected the field `webhook_uri` to be a primitive type in the JSON string but got " + data['webhook_uri']);
        }

        return true;
    }


}

ArduinoThingtemplate.RequiredProperties = ["name", "timezone"];

/**
 * The friendly name of the thing
 * @member {String} name
 */
ArduinoThingtemplate.prototype['name'] = undefined;

/**
 * Id of the organization the thing belongs to
 * @member {String} organization_id
 */
ArduinoThingtemplate.prototype['organization_id'] = undefined;

/**
 * ArduinoTemplatepropertyCollection is the media type for an array of ArduinoTemplateproperty (default view)
 * @member {Array.<module:model/ArduinoTemplateproperty>} properties
 */
ArduinoThingtemplate.prototype['properties'] = undefined;

/**
 * Tags of the thing
 * @member {Array.<module:model/Tag>} tags
 */
ArduinoThingtemplate.prototype['tags'] = undefined;

/**
 * Time zone of the thing
 * @member {String} timezone
 */
ArduinoThingtemplate.prototype['timezone'] = undefined;

/**
 * Webhook uri
 * @member {String} webhook_uri
 */
ArduinoThingtemplate.prototype['webhook_uri'] = undefined;






export default ArduinoThingtemplate;

