/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Override from './Override';

/**
 * The Clone model module.
 * @module model/Clone
 * @version 2.0.6
 */
class Clone {
    /**
     * Constructs a new <code>Clone</code>.
     * @alias module:model/Clone
     */
    constructor() { 
        
        Clone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Clone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Clone} obj Optional instance to populate.
     * @return {module:model/Clone} The populated <code>Clone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Clone();

            if (data.hasOwnProperty('overrides')) {
                obj['overrides'] = ApiClient.convertToType(data['overrides'], [Override]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Clone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Clone</code>.
     */
    static validateJSON(data) {
        if (data['overrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['overrides'])) {
                throw new Error("Expected the field `overrides` to be an array in the JSON data but got " + data['overrides']);
            }
            // validate the optional field `overrides` (array)
            for (const item of data['overrides']) {
                Override.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The overrides to apply to the cloned dashboard. An override is a tuple of ids: the id of the thing to override and the id of the new thing to link
 * @member {Array.<module:model/Override>} overrides
 */
Clone.prototype['overrides'] = undefined;






export default Clone;

