/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArduinoThing from '../model/ArduinoThing';
import ArduinoThinglayout from '../model/ArduinoThinglayout';
import CreateThingsV1Payload from '../model/CreateThingsV1Payload';
import Error from '../model/Error';
import Thing from '../model/Thing';
import ThingSketch from '../model/ThingSketch';

/**
* ThingsV1 service.
* @module api/ThingsV1Api
* @version 0.0.1
*/
export default class ThingsV1Api {

    /**
    * Constructs a new ThingsV1Api. 
    * @alias module:api/ThingsV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create things_v1
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV1Payload} createThingsV1Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1CreateWithHttpInfo(createThingsV1Payload, opts) {
      opts = opts || {};
      let postBody = createThingsV1Payload;
      // verify the required parameter 'createThingsV1Payload' is set
      if (createThingsV1Payload === undefined || createThingsV1Payload === null) {
        throw new Error("Missing the required parameter 'createThingsV1Payload' when calling thingsV1Create");
      }

      let pathParams = {
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create things_v1
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV1Payload} createThingsV1Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1Create(createThingsV1Payload, opts) {
      return this.thingsV1CreateWithHttpInfo(createThingsV1Payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createSketch things_v1
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1CreateSketchWithHttpInfo(id, thingSketch) {
      let postBody = thingSketch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1CreateSketch");
      }
      // verify the required parameter 'thingSketch' is set
      if (thingSketch === undefined || thingSketch === null) {
        throw new Error("Missing the required parameter 'thingSketch' when calling thingsV1CreateSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things/{id}/sketch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createSketch things_v1
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1CreateSketch(id, thingSketch) {
      return this.thingsV1CreateSketchWithHttpInfo(id, thingSketch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete things_v1
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    thingsV1DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1Delete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/things/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete things_v1
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    thingsV1Delete(id, opts) {
      return this.thingsV1DeleteWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteSketch things_v1
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1DeleteSketchWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1DeleteSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.thing+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things/{id}/sketch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteSketch things_v1
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1DeleteSketch(id) {
      return this.thingsV1DeleteSketchWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * layout things_v1
     * Returns the thing requested by the user, without last values data
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThinglayout} and HTTP response
     */
    thingsV1LayoutWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1Layout");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.thinglayout+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThinglayout;
      return this.apiClient.callApi(
        '/v1/things/{id}/layout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * layout things_v1
     * Returns the thing requested by the user, without last values data
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThinglayout}
     */
    thingsV1Layout(id, opts) {
      return this.thingsV1LayoutWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list things_v1
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */
    thingsV1ListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.thing+json; type=collection'];
      let returnType = [ArduinoThing];
      return this.apiClient.callApi(
        '/v1/things', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list things_v1
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */
    thingsV1List(opts) {
      return this.thingsV1ListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show things_v1
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1Show");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show things_v1
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1Show(id, opts) {
      return this.thingsV1ShowWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update things_v1
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1UpdateWithHttpInfo(id, thing, opts) {
      opts = opts || {};
      let postBody = thing;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1Update");
      }
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling thingsV1Update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update things_v1
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1Update(id, thing, opts) {
      return this.thingsV1UpdateWithHttpInfo(id, thing, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateSketch things_v1
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV1UpdateSketchWithHttpInfo(id, sketchId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV1UpdateSketch");
      }
      // verify the required parameter 'sketchId' is set
      if (sketchId === undefined || sketchId === null) {
        throw new Error("Missing the required parameter 'sketchId' when calling thingsV1UpdateSketch");
      }

      let pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v1/things/{id}/sketch/{sketchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateSketch things_v1
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV1UpdateSketch(id, sketchId) {
      return this.thingsV1UpdateSketchWithHttpInfo(id, sketchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
