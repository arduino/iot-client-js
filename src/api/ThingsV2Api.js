/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ArduinoThing', 'model/CreateThingsV2Payload', 'model/Error', 'model/Thing', 'model/ThingSketch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ArduinoThing'), require('../model/CreateThingsV2Payload'), require('../model/Error'), require('../model/Thing'), require('../model/ThingSketch'));
  } else {
    // Browser globals (root is window)
    if (!root.IotApi) {
      root.IotApi = {};
    }
    root.IotApi.ThingsV2Api = factory(root.IotApi.ApiClient, root.IotApi.ArduinoThing, root.IotApi.CreateThingsV2Payload, root.IotApi.Error, root.IotApi.Thing, root.IotApi.ThingSketch);
  }
}(this, function(ApiClient, ArduinoThing, CreateThingsV2Payload, Error, Thing, ThingSketch) {
  'use strict';

  /**
   * ThingsV2 service.
   * @module api/ThingsV2Api
   * @version 0.0.1
   */

  /**
   * Constructs a new ThingsV2Api. 
   * @alias module:api/ThingsV2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV2Payload} createThingsV2Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2CreateWithHttpInfo = function(createThingsV2Payload, opts) {
      opts = opts || {};
      var postBody = createThingsV2Payload;
      // verify the required parameter 'createThingsV2Payload' is set
      if (createThingsV2Payload === undefined || createThingsV2Payload === null) {
        throw new Error("Missing the required parameter 'createThingsV2Payload' when calling thingsV2Create");
      }

      var pathParams = {
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV2Payload} createThingsV2Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2Create = function(createThingsV2Payload, opts) {
      return this.thingsV2CreateWithHttpInfo(createThingsV2Payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2CreateSketchWithHttpInfo = function(id, thingSketch) {
      var postBody = thingSketch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2CreateSketch");
      }
      // verify the required parameter 'thingSketch' is set
      if (thingSketch === undefined || thingSketch === null) {
        throw new Error("Missing the required parameter 'thingSketch' when calling thingsV2CreateSketch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2CreateSketch = function(id, thingSketch) {
      return this.thingsV2CreateSketchWithHttpInfo(id, thingSketch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.thingsV2DeleteWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Delete");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.thingsV2Delete = function(id, opts) {
      return this.thingsV2DeleteWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2DeleteSketchWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2DeleteSketch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2DeleteSketch = function(id) {
      return this.thingsV2DeleteSketchWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */
    this.thingsV2ListWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'show_deleted': opts['showDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json; type=collection'];
      var returnType = [ArduinoThing];
      return this.apiClient.callApi(
        '/v2/things', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */
    this.thingsV2List = function(opts) {
      return this.thingsV2ListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2ShowWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Show");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2Show = function(id, opts) {
      return this.thingsV2ShowWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2UpdateWithHttpInfo = function(id, thing, opts) {
      opts = opts || {};
      var postBody = thing;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Update");
      }
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling thingsV2Update");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2Update = function(id, thing, opts) {
      return this.thingsV2UpdateWithHttpInfo(id, thing, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    this.thingsV2UpdateSketchWithHttpInfo = function(id, sketchId) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2UpdateSketch");
      }
      // verify the required parameter 'sketchId' is set
      if (sketchId === undefined || sketchId === null) {
        throw new Error("Missing the required parameter 'sketchId' when calling thingsV2UpdateSketch");
      }

      var pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch/{sketchId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    this.thingsV2UpdateSketch = function(id, sketchId) {
      return this.thingsV2UpdateSketchWithHttpInfo(id, sketchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
