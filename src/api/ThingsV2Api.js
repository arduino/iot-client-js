/**
 * Arduino IoT Cloud API
 *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArduinoThing from '../model/ArduinoThing';
import Error from '../model/Error';
import ThingCreate from '../model/ThingCreate';
import ThingSketch from '../model/ThingSketch';
import ThingUpdate from '../model/ThingUpdate';
import UpdateSketch from '../model/UpdateSketch';

/**
* ThingsV2 service.
* @module api/ThingsV2Api
* @version 1.4.5
*/
export default class ThingsV2Api {

    /**
    * Constructs a new ThingsV2Api. 
    * @alias module:api/ThingsV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/ThingCreate} thingCreate Payload to create a new thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2CreateWithHttpInfo(thingCreate, opts) {
      opts = opts || {};
      let postBody = thingCreate;
      // verify the required parameter 'thingCreate' is set
      if (thingCreate === undefined || thingCreate === null) {
        throw new Error("Missing the required parameter 'thingCreate' when calling thingsV2Create");
      }

      let pathParams = {
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/ThingCreate} thingCreate Payload to create a new thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Create(thingCreate, opts) {
      return this.thingsV2CreateWithHttpInfo(thingCreate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts) {
      opts = opts || {};
      let postBody = thingSketch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2CreateSketch");
      }
      // verify the required parameter 'thingSketch' is set
      if (thingSketch === undefined || thingSketch === null) {
        throw new Error("Missing the required parameter 'thingSketch' when calling thingsV2CreateSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2CreateSketch(id, thingSketch, opts) {
      return this.thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    thingsV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Delete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    thingsV2Delete(id, opts) {
      return this.thingsV2DeleteWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2DeleteSketchWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2DeleteSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2DeleteSketch(id, opts) {
      return this.thingsV2DeleteSketchWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Array.<String>} opts.ids Filter only the desired things
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values (default to false)
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */
    thingsV2ListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'show_deleted': opts['showDeleted'],
        'show_properties': opts['showProperties'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArduinoThing];
      return this.apiClient.callApi(
        '/v2/things', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Array.<String>} opts.ids Filter only the desired things
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values (default to false)
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */
    thingsV2List(opts) {
      return this.thingsV2ListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Show");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Show(id, opts) {
      return this.thingsV2ShowWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2UpdateWithHttpInfo(id, thingUpdate, opts) {
      opts = opts || {};
      let postBody = thingUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Update");
      }
      // verify the required parameter 'thingUpdate' is set
      if (thingUpdate === undefined || thingUpdate === null) {
        throw new Error("Missing the required parameter 'thingUpdate' when calling thingsV2Update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Update(id, thingUpdate, opts) {
      return this.thingsV2UpdateWithHttpInfo(id, thingUpdate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @param {module:model/UpdateSketch} opts.updateSketch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts) {
      opts = opts || {};
      let postBody = opts['updateSketch'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2UpdateSketch");
      }
      // verify the required parameter 'sketchId' is set
      if (sketchId === undefined || sketchId === null) {
        throw new Error("Missing the required parameter 'sketchId' when calling thingsV2UpdateSketch");
      }

      let pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Organization': opts['xOrganization']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch/{sketchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @param {module:model/UpdateSketch} opts.updateSketch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2UpdateSketch(id, sketchId, opts) {
      return this.thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
