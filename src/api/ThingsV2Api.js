/**
 * Iot API
 * Collection of all public API endpoints.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArduinoThing from '../model/ArduinoThing';
import CreateThingsV2Payload from '../model/CreateThingsV2Payload';
import Error from '../model/Error';
import Thing from '../model/Thing';
import ThingSketch from '../model/ThingSketch';
import UpdateSketch from '../model/UpdateSketch';

/**
* ThingsV2 service.
* @module api/ThingsV2Api
* @version 1.2.0
*/
export default class ThingsV2Api {

    /**
    * Constructs a new ThingsV2Api. 
    * @alias module:api/ThingsV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV2Payload} createThingsV2Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2CreateWithHttpInfo(createThingsV2Payload, opts) {
      opts = opts || {};
      let postBody = createThingsV2Payload;
      // verify the required parameter 'createThingsV2Payload' is set
      if (createThingsV2Payload === undefined || createThingsV2Payload === null) {
        throw new Error("Missing the required parameter 'createThingsV2Payload' when calling thingsV2Create");
      }

      let pathParams = {
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV2Payload} createThingsV2Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Create(createThingsV2Payload, opts) {
      return this.thingsV2CreateWithHttpInfo(createThingsV2Payload, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2CreateSketchWithHttpInfo(id, thingSketch) {
      let postBody = thingSketch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2CreateSketch");
      }
      // verify the required parameter 'thingSketch' is set
      if (thingSketch === undefined || thingSketch === null) {
        throw new Error("Missing the required parameter 'thingSketch' when calling thingsV2CreateSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2CreateSketch(id, thingSketch) {
      return this.thingsV2CreateSketchWithHttpInfo(id, thingSketch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    thingsV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Delete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    thingsV2Delete(id, opts) {
      return this.thingsV2DeleteWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2DeleteSketchWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2DeleteSketch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2DeleteSketch(id) {
      return this.thingsV2DeleteSketchWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Array.<String>} opts.ids Filter only the desired things
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things
     * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */
    thingsV2ListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'show_deleted': opts['showDeleted'],
        'show_properties': opts['showProperties']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArduinoThing];
      return this.apiClient.callApi(
        '/v2/things', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Array.<String>} opts.ids Filter only the desired things
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things
     * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */
    thingsV2List(opts) {
      return this.thingsV2ListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Show");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'show_deleted': opts['showDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Show(id, opts) {
      return this.thingsV2ShowWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2UpdateWithHttpInfo(id, thing, opts) {
      opts = opts || {};
      let postBody = thing;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2Update");
      }
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling thingsV2Update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2Update(id, thing, opts) {
      return this.thingsV2UpdateWithHttpInfo(id, thing, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSketch} opts.updateSketch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
    thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts) {
      opts = opts || {};
      let postBody = opts['updateSketch'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thingsV2UpdateSketch");
      }
      // verify the required parameter 'sketchId' is set
      if (sketchId === undefined || sketchId === null) {
        throw new Error("Missing the required parameter 'sketchId' when calling thingsV2UpdateSketch");
      }

      let pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArduinoThing;
      return this.apiClient.callApi(
        '/v2/things/{id}/sketch/{sketchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSketch} opts.updateSketch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
    thingsV2UpdateSketch(id, sketchId, opts) {
      return this.thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
