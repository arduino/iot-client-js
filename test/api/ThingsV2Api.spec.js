/**
 * Arduino IoT Cloud API
 * Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ArduinoIotClient);
  }
}(this, function(expect, ArduinoIotClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ArduinoIotClient.ThingsV2Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ThingsV2Api', function() {
    describe('thingsV2Clone', function() {
      it('should call thingsV2Clone successfully', function(done) {
        //uncomment below and update the code to test thingsV2Clone
        //instance.thingsV2Clone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2Create', function() {
      it('should call thingsV2Create successfully', function(done) {
        //uncomment below and update the code to test thingsV2Create
        //instance.thingsV2Create(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2CreateSketch', function() {
      it('should call thingsV2CreateSketch successfully', function(done) {
        //uncomment below and update the code to test thingsV2CreateSketch
        //instance.thingsV2CreateSketch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2Delete', function() {
      it('should call thingsV2Delete successfully', function(done) {
        //uncomment below and update the code to test thingsV2Delete
        //instance.thingsV2Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2DeleteSketch', function() {
      it('should call thingsV2DeleteSketch successfully', function(done) {
        //uncomment below and update the code to test thingsV2DeleteSketch
        //instance.thingsV2DeleteSketch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2List', function() {
      it('should call thingsV2List successfully', function(done) {
        //uncomment below and update the code to test thingsV2List
        //instance.thingsV2List(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2Show', function() {
      it('should call thingsV2Show successfully', function(done) {
        //uncomment below and update the code to test thingsV2Show
        //instance.thingsV2Show(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2Template', function() {
      it('should call thingsV2Template successfully', function(done) {
        //uncomment below and update the code to test thingsV2Template
        //instance.thingsV2Template(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2Update', function() {
      it('should call thingsV2Update successfully', function(done) {
        //uncomment below and update the code to test thingsV2Update
        //instance.thingsV2Update(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('thingsV2UpdateSketch', function() {
      it('should call thingsV2UpdateSketch successfully', function(done) {
        //uncomment below and update the code to test thingsV2UpdateSketch
        //instance.thingsV2UpdateSketch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
